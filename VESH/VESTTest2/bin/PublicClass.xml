<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PublicClass</name>
    </assembly>
    <members>
        <member name="T:PublicClass.Threading.Process.CustomobjectDel">
            <summary>
            生成对象的代理声明 需要线程安全的
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Threading.Process.CustomerThread">
            <summary>
            消费者线程
            </summary>
        </member>
        <member name="T:PublicClass.Threading.ProtectThread">
            <summary>
            主要用于提供对线程体的致命错误的捕捉机制
            FinallyDo在运行完成时总会运行的一段代码可以用于处理变量清除
            错误通过ExceptionThrowen方法传递给线程，默认方法内只是输出这个错误！子类可以替换这个方法以处理错误但不能重新启动线程 
            </summary>
        </member>
        <member name="F:PublicClass.Threading.ProtectThread.num">
            <summary>
            线程号
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.GetNum">
            <summary>
            -1时为未设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.#ctor(PublicClass.Threading.Run)">
            <summary>
            自定义处理protRun对象
            </summary>
            <param name="_protRun"></param>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.#ctor">
            <summary>
            只在继承时有效 但是需要自定义proRun对象
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.run">
            <summary>
            代理线程执行方法
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.ProtectedRun">
            <summary>
            建议覆盖 对错误进行捕捉的线程方法
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.ExceptionThrowen(System.Exception)">
            <summary>
            建议覆盖 如果要对一些类的变量进行处理需要重写这个方法！默认作打印输出处理！
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.FinallyDo">
            <summary>
            建议覆盖 如果要对一些类的变量进行处理需要重写这个方法！默认作打印输出处理！
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.Start">
            <summary>
            安全启动线程 不支持多重启动
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.CreateThread">
            <summary>
            产生线程 并设置Thread属性为最后一次运行的线程
            </summary>
            <returns></returns>
        </member>
        <member name="F:PublicClass.Threading.ProtectThread.thread">
            <summary>
            最近一个线程对象
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.GetThread">
            <summary>
            获得线程对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.SetThread(System.Threading.Thread)">
            <summary>
            设置线程对象
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.CallThreadEventSimple(System.Int32,System.Object)">
            <summary>
            方便处理方法 说明事件号已经附加一个对象
            </summary>
            <param name="eventNum"></param>
            <param name="obj"></param>
        </member>
        <member name="M:PublicClass.Threading.ProtectThread.CallThreadEventSimple(System.Int32,System.Object[])">
            <summary>
             方便处理方法 说明事件号已经附加一组对象
            </summary>
            <param name="eventNum"></param>
            <param name="objs"></param>
        </member>
        <member name="P:PublicClass.Threading.ProtectThread.Num">
            <summary>
            线程号 只能设置一次
            </summary>
        </member>
        <member name="E:PublicClass.Threading.ProtectThread.ExceptionThrowenEvent">
            <summary>
            抛出错误 并产生错误事件 完成FinallyDo方法后线程停止
            </summary>
        </member>
        <member name="E:PublicClass.Threading.ProtectThread.FinallyDoEvent">
            <summary>
            通知可以完成关闭操作了
            </summary>
        </member>
        <member name="P:PublicClass.Threading.ProtectThread.Thread">
            <summary>
            产生的最近一个线程对象
            </summary>
        </member>
        <member name="E:PublicClass.Threading.ProtectThread.ThreadEvent">
            <summary>
            不包括已有的事件 只是用于传递信息之用
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.#ctor">
            <summary>
            只在继承时有效 但是需要自定义protRun对象
            </summary>
        </member>
        <member name="F:PublicClass.Threading.CircleThread.isCanRun">
            <summary>
            是否可以继续运行
            </summary>
        </member>
        <member name="F:PublicClass.Threading.CircleThread.syn">
            <summary>
            是否不管用户是否完成操作都立刻终止外部程序
            </summary>
        </member>
        <member name="F:PublicClass.Threading.CircleThread.first">
            <summary>
            是否是第一次执行
            </summary>
        </member>
        <member name="F:PublicClass.Threading.CircleThread.key">
            <summary>
            用于锁定是否可以继续运行的对象
            </summary>
        </member>
        <member name="F:PublicClass.Threading.CircleThread.exThrowen">
            <summary>
            短期记载错误
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread._pt_ExceptionThrowenEvent(System.Object,PublicClass.Event.EventArg)">
            <summary>
            内部线程使用方法 记录抛出的错误并唤醒主线程
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.CircleThread._pt_FinallyDoEvent(System.Object,PublicClass.Event.EventArg)">
            <summary>
            内部线程使用方法 唤醒主线程
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread._pt_protRun(System.Object,PublicClass.Event.EventArg)">
            <summary>
            内部线程使用方法 封装 并替换运行内部线程的主要执行方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.ProtectedRun">
            <summary>
            覆盖原保护方法
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.CircleRun">
            <summary>
            允许重载以使用protRun代理对象
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.IsFirst">
            <summary>
            是否是第一次循环
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.FinalRun">
            <summary>
            建议覆盖 用于线程正常停止时的处理任务，比如对某些类的变量的消除！默认作打印输出处理！
            与FinallyDo方法的区别在于其可以抛出错误 并被Throwen方法捕捉
            </summary>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.IsSynClose">
            <summary>
            是否同步关闭
            </summary>
            <returns>返回 syn</returns>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.SetSynClose(System.Boolean)">
            <summary>
            是否要求同步关闭
            </summary>
            <param name="syn">要设置的</param>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.IsCanRun">
            <summary>
            是否可以执行
            </summary>
            <returns>返回是否可以执行</returns>
        </member>
        <member name="M:PublicClass.Threading.CircleThread.SetCanRun(System.Boolean)">
            <summary>
            设置是否可以继续执行 如果要中止线程 希望使用这个方法
            </summary>
            <param name="canRun">是否可以继续执行</param>
        </member>
        <member name="E:PublicClass.Threading.CircleThread.FinalRunEvent">
            <summary>
            声明最终执行事件
            </summary>
        </member>
        <member name="P:PublicClass.Threading.CircleThread.CanRun">
            <summary>
            .Net写法 属性是否可以继续执行 如果要中止线程 希望使用这个属性为False 这样可以顺序处理 finalRun 和 finallyDo
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CustomerThread.customobject">
            <summary>
            用于生成对象的代理实例
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CustomerThread.queue">
            <summary>
            需要放入的线程 如果出现满错误 会定时等待。
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CustomerThread.waitTime">
            <summary>
            等待时间 毫秒 默认半秒钟
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.HasWaitTime">
            <summary>
            判断是否有等待时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.GetWaitTime">
            <summary>
            返回 waitTime。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.#ctor(PublicClass.Threading.Process.CustomobjectDel,System.Int32,PublicClass.Collections.LimitQueue)">
            <summary>
            CreateobjectDel对象，线程号，限制队列对象 生成新的创建者对象 默认等待半秒钟
            </summary>
            <param name="cod">产生获得产品对象代理方法</param>
            <param name="num">线程号</param>
            <param name="queue">限制队列对象</param>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.#ctor(PublicClass.Threading.Process.CustomobjectDel,System.Int32,PublicClass.Collections.LimitQueue,System.Int32)">
            <summary>
            CreateobjectDel对象，线程号，限制队列对象，等待时间 生成新的创建者对象
            </summary>
            <param name="cod">产生获得产品对象代理方法</param>
            <param name="num">线程号</param>
            <param name="queue">限制队列对象</param>
            <param name="waitTime">等待时间</param>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.CustomTRun(System.Object,PublicClass.Event.EventArg)">
            <summary>
            用于消费对象的过程
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.CustomerThread.Customobject(System.Object,PublicClass.Event.EventArg,System.Object)">
            <summary>
            允许覆盖以处理对象
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <param name="data"></param>
        </member>
        <member name="P:PublicClass.Threading.Process.CustomerThread.WaitTime">
            <summary>
            等待时间
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.CronExpressionTrigger">
            <summary>
            每次到期后都会以当前时间为基准计算下次运行时间!
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.ATrigger">
            <summary>
             触发器原型用来处理 当某个条件具备时触发的事件操作
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.ATrigger.SetEnable(System.Boolean)">
            <summary>
            设置是否允许触发
            </summary>
            <param name="IsEnable"></param>
        </member>
        <member name="M:PublicClass.Module.Trigger.ATrigger.Attempt(PublicClass.Event.EventArg)">
            <summary>
            需要实现的方法 如果有结果那么会触发事件，否则正常进行。
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Module.Trigger.ATrigger.CallTriggerEventSafely(System.Object,PublicClass.Event.EventArg)">
            <summary>
            可以覆盖 以串行的处理方式单独处理这个事件，并且可以不触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Module.Trigger.ATrigger.Taste">
            <summary>
            尝试是否可以触发事件
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.ATrigger.Taste(PublicClass.Event.EventArg)">
            <summary>
            尝试是否可以触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:PublicClass.Module.DESXcrypt">
            <summary> 
            XNcrypt 提供简单方法实现TripleDESCryptoServiceProvider快速加解密 
            源码从网上下载 出处不明
            可以通过Xcrypt.MSCP.GenerateKey()与GenerateIV()获取其Key与Iv
            </summary> 
        </member>
        <member name="F:PublicClass.Module.DESXcrypt.sKey">
            <summary>
            默认密钥
            </summary>
        </member>
        <member name="F:PublicClass.Module.DESXcrypt.sIV">
            <summary>
            默认矢量
            </summary>
        </member>
        <member name="F:PublicClass.Module.DESXcrypt.MSCP">
            <summary>
            构造一个对称算法 
            </summary>
        </member>
        <member name="M:PublicClass.Module.DESXcrypt.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:PublicClass.Module.DESXcrypt.#ctor(System.String,System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            必须提供迷钥与矢量，保证加密成功
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="mscp"></param>
        </member>
        <member name="M:PublicClass.Module.DESXcrypt.Encrypt(System.String)">
            <summary> 
            加密字符串 
            </summary> 
            <param name="Value">输入的字符串</param> 
            <returns>加密后的字符串</returns> 
        </member>
        <member name="M:PublicClass.Module.DESXcrypt.Decrypt(System.String)">
            <summary> 
            解密字符串 
            </summary> 
            <param name="Value">加过密的字符串</param> 
            <returns>解密后的字符串</returns> 
        </member>
        <member name="T:PublicClass.Module.CronExpression.CronNode">
            <summary>
            各种Cron标记的基类
            a,b:a或者b
            a/b:a为底b的倍数
            a-b:从a到b
            a#b:允许在星期域中出现。这个字符用于指定本月的某某天。例如：“6#3”表示本月第三周的星期五星期日为1 注意这里DayOfWeek 中星期日为0
            aL：在日期和星期意思不同，例如day-of-month域中表示一个月的最后一天。如果在day-of-week域表示周六，如果在day-of-week域中前面加上数字，它表示一个月的最后第几天，例如‘6L’就表示一个月的最后一个星期五
            aW：只允许日期域出现。这个字符用于指定日期的最近工作日。例如：如果你在日期域中写 “15W”，表示：这个月15号最近的工作日
            aC:
            </summary>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CronNode.Regen(System.DateTime,PublicClass.Module.CronExpression.IDateTimePart)">
            <summary>
            用于对于当前操作进行调整（扩大）
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CronNode.GetFirst(System.DateTime,PublicClass.Module.CronExpression.IDateTimePart)">
            <summary>
            用于对于当前操作如何设置初始值（缩小）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CommonCronNode.DayRegen(System.Int32,System.Int32,System.Int32)">
            <summary>
            29，30，31号必然可以设置在本月或者下下个月 一般的这里的条件只对2月有用
            </summary>
            <param name="time"></param>
            <param name="maxDate"></param>
            <param name="nextmaxDate"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CommonCronNode.DayGetFirst(System.Int32,System.Int32,System.Int32)">
             <summary>
            29，30，31号必然可以设置在本月或者下下个月 一般的这里的条件只对2月有用
             </summary>
             <param name="time"></param>
             <param name="maxDate"></param>
             <param name="nextmaxDate"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CommonCronNode.Regen(System.Int32,System.Int32)">
            <summary>
            用于对于当前操作进行调整（扩大）
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Module.CronExpression.CommonCronNode.GetFirst(System.Int32,System.Int32)">
            <summary>
            用于对于当前操作如何设置初始值（缩小）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.IO.Log.ConsoleLogResource">
            <summary>
            用于桌面输出!
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.ILogResource.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.ILogResource.Close">
            <summary>
            关闭输出
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.ILogResource.Write(PublicClass.IO.Log.LogRecord,System.String)">
            <summary>
            写入信息
            </summary>
            <param name="record"></param>
            <param name="value"></param>
        </member>
        <member name="T:PublicClass.IO.Config.AConfig">
             <summary>
            负责具体的获取与设置相关信息
            
            @author 白冰
            
            @version 2.0.81212.1
             </summary>
        </member>
        <member name="F:PublicClass.IO.Config.AConfig.allowCascade">
             <summary>
            提供是否可以递归调用
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.AConfig.ChangeValue">
             <summary>
            用于判断是否属性改变
            
            @return isChangeValue
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.AConfig.SetChangeValue(System.Boolean)">
             <summary>
            @param isChangeValue
                       要设置的 isChangeValue
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.AConfig.IsAllowChangeValue">
             <summary>
            @return allowChangeValue
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.AConfig.SetAllowChangeValue(System.Boolean)">
             <summary>
            @param allowChangeValue
                       要设置的 allowChangeValue
             </summary>
        </member>
        <member name="T:PublicClass.Collections.Pool.PoolStaregyFactory">
            
             @author baibing
             
            
        </member>
        <member name="T:PublicClass.Collections.Pool.IPoolValueFactory">
            <summary>
            一般处理池空缺而且可以填充时自动新建和关闭功能
            </summary>
        </member>
        <member name="M:PublicClass.Collections.Pool.IPoolValueFactory.CreateObject(System.Object)">
            <summary>
            处理所存储类型的新建操作
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.Pool.IPoolValueFactory.CloseObject(System.Object)">
            <summary>
            处理所存储类型的关闭操作
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:PublicClass.Threading.Process.AbstractProcess">
            <summary>
            用于为IProcess的继承类提供一些方便的统一的实现方法
            注意如果INIT中新建了资源 请务必重载CheckDispose()方法 释放资源 否则很容易造成无法关闭程序
            </summary>
        </member>
        <member name="T:PublicClass.Threading.Process.IProcess">
            <summary>
            作为一种架构设计 完成以下4个方面的要求 基本上可以完成对业务逻辑的初始化，开始，中断，清理等操作。
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.IProcess.Init">
            <summary>
            处理初始化进程
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.IProcess.Start">
            <summary>
            处理开始/继续进程
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.IProcess.Stop">
            <summary>
            处理结束/中断进程
            </summary>
        </member>
        <member name="E:PublicClass.Threading.Process.IProcess.ProcessEvent">
            <summary>
            进程的事件，级别可以通过EventLevel设置 (一般的应该有默认订阅的方法，或者使用安全调用事件方法) 
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.#ctor">
            <summary>
             用于为IProcess的继承类提供一些方便的统一的实现方法
            </summary>
            <param name="type">外部唯一一次可以设置其日志级别的机会</param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(PublicClass.Threading.Process.ProcessEventArg)">
            <summary>
            基础方法 最终调用并抛出事件 如果要提前处理事件可以在这里处理
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(PublicClass.Threading.Process.ProcessState)">
            <summary>
            方便处理方法 便于程序声明进程状态
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(System.Exception,System.Object)">
            <summary>
            方便处理方法 便于程序声明状态，错误，以及一个附加的对象
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
            <param name="obj"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(System.Exception,System.Object[])">
            <summary>
            方便处理方法 便于程序声明状态，错误，以及一个附加的对象
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
            <param name="obj"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(System.Int32,System.Object)">
            <summary>
            方便处理方法 说明事件号已经附加一个对象
            </summary>
            <param name="eventNum"></param>
            <param name="obj"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(System.Int32,System.Object[])">
            <summary>
             方便处理方法 说明事件号已经附加一组对象
            </summary>
            <param name="eventNum"></param>
            <param name="objs"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(PublicClass.IO.Log.LogType,System.Int32,System.Object)">
            <summary>
            方便处理方法 说明事件号已经附加一个对象
            </summary>
            <param name="type"></param>
            <param name="eventNum"></param>
            <param name="obj"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.CallProcessEventSimple(PublicClass.IO.Log.LogType,System.Int32,System.Object[])">
            <summary>
             方便处理方法 说明事件号已经附加一组对象
            </summary>
            <param name="eventNum"></param>
            <param name="objs"></param>
        </member>
        <member name="F:PublicClass.Threading.Process.AbstractProcess.logType">
            <summary>
            默认为Info
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.GetLogType">
            <summary>
            获取消息日志等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.SetLogType(PublicClass.IO.Log.LogType)">
            <summary>
            允许改变日志等级
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.GetState">
            <summary>
            进程状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.AbstractProcess.Stop">
            <summary>
            请检测CheckStop以确定 是否触发Stop状态或者Dispose状态
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.AbstractProcess.BaseLogType">
            <summary>
            消息日志等级
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.AbstractProcess.State">
            <summary>
            进程状态
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.SerialTriggerProxy">
            <summary>
            串行触发器代理 要求先触发器的事件来触发后触发器，当2个条件都满足时才触发整体的事件
            
            @author 白冰
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.TriggerProxy">
            <summary>
            触发器代理 用来完全代理Trigger可以用来生成其它代理的Trigger。
            
            @author 白冰
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TriggerProxy.GetTrigger">
            <summary>
            @return trigger
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TriggerProxy.#ctor">
            <summary>
            继承的无参数构造函数，需要起设置Trigger
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.AddListener(PublicClass.IO.Log.ILogListener)">
            <summary>
            设置订阅者
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.#ctor(PublicClass.IO.Log.LogRecord)">
            <summary>
            使用桥接类实现灵活配置的默认参数/格式化/多资源日志记录！
            </summary>
            <param name="record">默认参数</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Log(PublicClass.IO.Log.LogRecord)">
             <summary>
            根据Logger状态判断是否可以合适的记录数据 
             </summary>
             <param name="record"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Log(PublicClass.IO.Log.LogType,System.String)">
            <summary>
            便于记录其日志类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Log(PublicClass.IO.Log.LogType,System.String,System.Object[])">
            <summary>
            便于记录其日志类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Log(PublicClass.IO.Log.LogType,System.Int32,System.String)">
            <summary>
            便于记录其日志类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Log(PublicClass.IO.Log.LogType,System.Int32,System.String,System.Object[])">
            <summary>
            便于记录其日志类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Release(System.String)">
            <summary>
            便于记录Release类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Release(System.Int32,System.String)">
            <summary>
            便于记录Release类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Release(System.String,System.Object[])">
            <summary>
            便于记录Release类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Release(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Release类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Error(System.String)">
            <summary>
            便于记录Error类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Error(System.Int32,System.String)">
            <summary>
            便于记录Error类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Error(System.String,System.Object[])">
            <summary>
            便于记录Error类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Error(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Error类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Warn(System.String)">
            <summary>
            便于记录Warn类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Warn(System.Int32,System.String)">
            <summary>
            便于记录Warn类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Warn(System.String,System.Object[])">
            <summary>
            便于记录Warn类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Warn(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Warn类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Info(System.String)">
            <summary>
            便于记录Info类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Info(System.Int32,System.String)">
            <summary>
            便于记录Info类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Info(System.String,System.Object[])">
            <summary>
            便于记录Info类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Info(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Info类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Debug(System.String)">
            <summary>
            便于记录Debug类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Debug(System.Int32,System.String)">
            <summary>
            便于记录Debug类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Debug(System.String,System.Object[])">
            <summary>
            便于记录Debug类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Debug(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Debug类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Test(System.String)">
            <summary>
            便于记录Test类型，内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Test(System.Int32,System.String)">
            <summary>
            便于记录Test类型，日志号,内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Test(System.String,System.Object[])">
            <summary>
            便于记录Test类型，格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Test(System.Int32,System.String,System.Object[])">
            <summary>
            便于记录Test类型，日志号,格式化内容 其它采用默认值，默认值修改通过访问DefaultLogRecord
            </summary>
            <param name="num"></param>
            <param name="data">格式化字符串</param>
            <param name="param">内容</param>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.Close">
            <summary>
            Logger关闭事件
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.Logger.CreateSourceLoggerDecorator(System.String)">
            <summary>
            生成一个SourceLoggerDecorator
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="E:PublicClass.IO.Log.Logger.LogEvent">
            <summary>
            记录日志时触发 参数为GetPara(0) LogType GetPara(1) string
            </summary>
        </member>
        <member name="E:PublicClass.IO.Log.Logger.CloseEvent">
            <summary>
            Logger关闭事件
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.AConfigResource">
             <summary>
            负责管理数据源和通知Manager数据源的改变和保存Manager到数据源
            
            @author 白冰
            
             </summary>
        </member>
        <member name="T:PublicClass.Db.SQLHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, 
            scalable best practices for common uses of SqlClient.
            </summary>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connString">a valid connection string for a SqlConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) using an existing SQL Transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="trans">an existing sql transaction</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns a resultset against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader r = ExecuteReader(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connString">a valid connection string for a SqlConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the results</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <param name="cmdType"></param>
            <param name="cmdText"></param>
            <param name="cmdParms"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connString">a valid connection string for a SqlConnection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="conn">an existing database connection</param>
            <param name="cmdType">the CommandType (stored procedure, text, etc.)</param>
            <param name="cmdText">the stored procedure name or T-SQL command</param>
            <param name="cmdParms">an array of SqlParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of SqlParamters to be cached</param>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ClearParameterValues(System.Data.SqlClient.SqlParameter[])">
            <summary>
            清除parameter的值
            </summary>
            <param name="cmdParms">SqlParameter数组</param>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.CreateReturnParameter(System.String)">
            <summary>
            创建返回参数
            </summary>
            <param name="parameterName">参数名称</param>
            <returns>new SqlParameter</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached SqlParamters array</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Prepare a command for execution
            </summary>
            <param name="cmd">SqlCommand object</param>
            <param name="conn">SqlConnection object</param>
            <param name="trans">SqlTransaction object</param>
            <param name="cmdType">Cmd type e.g. stored procedure or text</param>
            <param name="cmdText">Command text, e.g. Select * from Products</param>
            <param name="cmdParms">SqlParameters to use in the command</param>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">a valid SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:PublicClass.Db.SQLHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">a valid SqlTransaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-SQL command</param>
            <param name="commandParameters">an array of SqlParamters used to execute the command</param>
            <returns>a dataset containing the resultset generated by the command</returns>
        </member>
        <member name="T:PublicClass.Db.Ni.IDataParameters">
            <summary>
            对象格式化接口 用于处理对象属性转化为SQLParameter
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataParameters.GetParas(System.String,PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            根据对象生成DBParameters
            </summary>
            <param name="res"></param>
            <param name="paras"></param>
            <param name="entity">如果属性附有NiDataParameterAttribute属性，那么可以认为是参数之一，其它无属性的不是参数，但是如果都无NiDataParameterAttribute属性定义那么认为该对象所有的可读属性都是参数</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataParameters.GetParas(System.String,PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            根据对象生成DBParameters
            </summary>
            <param name="res"></param>
            <param name="paras"></param>
            <param name="idicValue">Key为ParaEntity.ParameterName,值为对象属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataParameters.GetParas(System.String,PublicClass.Db.Ni.IDataResource,System.Object)">
            <summary>
            根据对象生成DBParameters
            </summary>
            <param name="res"></param>
            <param name="entity">如果属性附有NiDataParameterAttribute属性，那么可以认为是参数之一，其它无属性的不是参数，但是如果都无NiDataParameterAttribute属性定义那么认为该对象所有的可读属性都是参数，且属性名为参数名</param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Db.Ni.IDataParameters.IsAutoCacheParameters">
            <summary>
            是否自动缓存Parameters
            </summary>
        </member>
        <member name="T:PublicClass.Event.EventArg">
            <summary>
            事件参数类，使用数组存储数据。 只有子类可以进行直接操作，否则必须通过GetXXX方法进行读取，是否可以SetXXX视子类需要。
            建议不开发Set操作。而可以通过加入对象而不是数据来实现相应的操作！ 重写 equals 方法 Comparator接口 和 Comparable接口
            支持作为 Tree/Hash 的操作 值相同的EventArg相等
            主要用于继承而作为参数类使用 如果作为参数类直接使用 建议重载并视需要开放GetPara 与 SetPara方法。
            白冰 2.0.51212.1
            </summary>
        </member>
        <member name="T:PublicClass.Common.Tool">
            <summary>
            用于处理一些常见的操作，比如判断对象是否有效等等
            </summary>
        </member>
        <member name="M:PublicClass.Common.Tool.TurnCharSet(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            把字符串从一个字符集转换成另一个字符集
            </summary>
            <param name="data">要转换的字符串</param>
            <param name="source">源码字符集</param>
            <param name="aim">目的码字符集</param>
            <returns>根据源码和目的码将输入的字符串进行转换并返回值。如果系统不支持目的码就返回原值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.TurnCharSetSafe(System.String,System.String,System.String)">
            <summary>
            把字符串从一个字符集转换成另一个字符集
            </summary>
            <param name="data">要转换的字符串</param>
            <param name="source">源码字符集</param>
            <param name="aim">目的码字符集</param>
            <returns>根据源码和目的码将输入的字符串进行转换并返回值。如果系统不支持目的码就返回原值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.TurnCharSet(System.String,System.String,System.String)">
            <summary>
            把字符串从一个字符集转换成另一个字符集
            </summary>
            <param name="data">要转换的字符串</param>
            <param name="source">源码字符集</param>
            <param name="aim">目的码字符集</param>
            <returns>根据源码和目的码将输入的字符串进行转换并返回值。如果系统不支持目的码就返回原值</returns>
        </member>
        <member name="F:PublicClass.Common.Tool.regEncode">
            <summary>
            特别处理对特殊符号与中文符号的转义，对纯中文不转义以保证数据的简短和有效。  todo 未完成转义字符
            </summary>
        </member>
        <member name="M:PublicClass.Common.Tool.WebEncode(System.String)">
            <summary>
            进行web使用的数据转义保持
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.WebDecode(System.String)">
            <summary>
            进行web使用的数据进行转义显示!
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.IsEnable(System.String)">
            <summary>
            判断对象是否有效
            </summary>
            <param name="data">对象类型</param>
            <returns>如果为Null返回false，否则返回true</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.IsEnable(System.Object)">
            <summary>
            判断对象是否有效
            </summary>
            <param name="data">对象类型</param>
            <returns>如果为Null返回false，否则返回true</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.GetValue(System.String)">
            <summary>
            获取值得string值 如果不存在使用默认值""
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.GetValue(System.String,System.String)">
            <summary>
            获取值得string值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.GetValue(System.Object)">
            <summary>
            获取值得object值 如果不存在使用默认值＂＂
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的对象值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.GetValue(System.Object,System.Object)">
            <summary>
            获取值得object值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的对象值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToStringValue(System.Object)">
            <summary>
            获取值得string值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToStringValue(System.Object,System.Object)">
            <summary>
            获取值得string值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToIntValue(System.Object)">
            <summary>
            获取值得int值 如果不存在使用默认值0
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToIntValue(System.Object,System.Int32)">
            <summary>
            获取值得int值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToLongValue(System.Object)">
            <summary>
            获取值得long值 如果不存在使用默认值0
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToLongValue(System.Object,System.Int64)">
            <summary>
            获取值得long值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToFloatValue(System.Object)">
            <summary>
            获取值得float值 如果不存在使用默认值0
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToFloatValue(System.Object,System.Single)">
            <summary>
            获取值得float值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToDoubleValue(System.Object)">
            <summary>
            获取值得double值 如果不存在使用默认值0
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToDoubleValue(System.Object,System.Double)">
            <summary>
            获取值得double值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToBoolValue(System.Object)">
            <summary>
            获取值得bool值 如果不存在使用默认值false
            </summary>
            <param name="data">转换值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ToBoolValue(System.Object,System.Boolean)">
            <summary>
            获取值得bool值 如果不存在使用默认值
            </summary>
            <param name="data">转换值</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后的数字值</returns>
        </member>
        <member name="M:PublicClass.Common.Tool.ObjectSleep(System.Int32)">
            <summary>
            执行定时的休眠操作
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:PublicClass.Common.Tool.ObjectWait(System.Object,System.Int32)">
            <summary>
            执行定时的等待操作
            </summary>       
            <param name="obj">等待的对象</param>
            <param name="time">等待的毫秒值</param>
        </member>
        <member name="M:PublicClass.Common.Tool.ObjectWait(System.Object)">
            <summary>
            执行定时的等待操作
            </summary>
            <param name="obj">等待的对象</param>
        </member>
        <member name="M:PublicClass.Common.Tool.ObjectPulse(System.Object)">
            <summary>
            执行定时的唤醒操作
            </summary>
            <param name="obj">等待的对象</param>
        </member>
        <member name="M:PublicClass.Common.Tool.ObjectPulseAll(System.Object)">
            <summary>
            执行定时的唤醒操作
            </summary>
            <param name="obj">等待的对象</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String)">
            <summary>
            记录日志信息到一个文件 记录时间
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String,System.Boolean)">
            <summary>
            记录日志信息到一个文件 记录时间
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
            <param name="charSet">字符集</param>
            <param name="recordTime">是否记录时间</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String,System.String)">
            <summary>
            记录日志信息到一个文件 记录时间
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
            <param name="charSet">字符集</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            记录日志信息到一个文件 记录时间
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
            <param name="charSet">字符集</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            记录日志信息到一个文件
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
            <param name="charSet">字符集</param>
            <param name="recordTime">是否记录时间</param>
        </member>
        <member name="M:PublicClass.Common.Tool.RecordFile(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            记录日志信息到一个文件
            </summary>
            <param name="file">文件名</param>
            <param name="data">文本数据</param>
            <param name="charSet">字符集</param>
            <param name="recordTime">是否记录时间</param>
        </member>
        <member name="F:PublicClass.Common.Tool.DefaultEncoding">
            <summary>
            获取本机的默认字符集
            </summary>
        </member>
        <member name="F:PublicClass.Common.Tool.LineSeparator">
            <summary>
            此系统的操作终止符号
            </summary>
        </member>
        <member name="F:PublicClass.Common.Tool.yyyy_MM_dd_HH_mm_ss_S">
            <summary>
            yyyy-MM-dd HH:mm:ss:S 对应.net为yyyy-MM-dd HH:mm:ss:f
            简单格式化字符串
            </summary>
        </member>
        <member name="M:PublicClass.Common.Tool.FormatDate(System.String,System.DateTime)">
            <summary>
            使用格式化字符串格式化时间
            </summary>
            <param name="sdf">格式化字符串</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.FormatDate(System.DateTime)">
            <summary>
            使用默认格式化字符串格式化时间
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.FormatDate(System.String)">
            <summary>
            使用默认格式化字符串格式化时间 并首先对字符串进行转化成DateTime 然后进行标准格式化显示
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.FormatNow(System.String)">
            <summary>
            格式化现有的时间
            </summary>
            <param name="sdfFormat">格式字符串</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.FormatNow">
            <summary>
            格式化现有的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Common.Tool.StopThread(System.Threading.Thread)">
            <summary>
            关闭线程
            </summary>
            <param name="thread"></param>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Type)">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>        
            <param name="aim">目的对象类</param>        
            <param name="flag">替换类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Type,PublicClass.Bean.BeanBandingFlags)">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>        
            <param name="aim">目的对象类</param>        
            <param name="flag">替换类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object},System.Type)">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>
            <param name="aimCol">目的对象的存储集合类</param>
            <param name="aim">目的对象类</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object},System.Type,PublicClass.Bean.BeanBandingFlags)">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>
            <param name="aimCol">目的对象的存储集合类</param>
            <param name="aim">目的对象类</param>
            <param name="flag">替换类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object},System.Type,System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object})">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>
            <param name="aimCol">目的对象的存储集合类</param>
            <param name="aim">目的对象类</param>
            <param name="passPro">允许赋值的属性集合</param>
            <param name="forPro">不允许赋值的属性集合</param>
            <param name="flag">替换类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.TransportAll(System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object},System.Type,System.Collections.Generic.ICollection{System.Object},System.Collections.Generic.ICollection{System.Object},PublicClass.Bean.BeanBandingFlags)">
            <summary>
            用于批量从源集合中生成目的对象的集合 要求目的对象有无参数的初始化方法
            </summary>
            <param name="sourceCol">源对象集合</param>
            <param name="aimCol">目的对象的存储集合类</param>
            <param name="aim">目的对象类</param>
            <param name="passPro">允许赋值的属性集合</param>
            <param name="forPro">不允许赋值的属性集合</param>
            <param name="flag">替换类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.GetAllMethod(System.Type,System.String)">
            <summary>
            获得方法
            </summary>
            <param name="cl">对象类</param>
            <param name="name">方法名</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.GetAllMethod(System.Type,System.String,System.Int32)">
            <summary>
            获得方法
            </summary>
            <param name="cl">对象类</param>
            <param name="name">方法名</param>
            <param name="size">参数个数</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.GetMethod(System.Type,System.String)">
            <summary>
            获得同名无参方法
            </summary>
            <param name="type">对象类</param>
            <param name="name">方法名</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            根据已经有的参数集合 获得方法
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="paraTypes"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.SetPropertyValueSP(System.Object,System.String,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.SetPropertyValueSP(System.Object,System.String,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanTool.SetPropertyValue(System.Object,System.String,System.Object[])">
            <summary>
            尝试所有类型方法进行操作设置属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.SetPropertyValue(System.Object,System.String,System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作设置属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.SetPropertyValueSP(System.Object,System.String,System.Type,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.SetPropertyValueSP(System.Object,System.String,System.Type,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanTool.SetPropertyValue(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            尝试所有类型方法进行操作设置属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.SetPropertyValue(System.Object,System.String,System.Type[],System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作设置属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.GetPropertyValue(System.Object,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.GetPropertyValue(System.Object,System.String,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.GetPropertyValueSP(System.Object,System.String,System.Type,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanTool.GetPropertyValueSP(System.Object,System.String,System.Type,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanTool.GetPropertyValue(System.Object,System.String,System.Type[],System.Object[])">
            <summary>
            尝试所有类型方法进行操作获得属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.GetPropertyValue(System.Object,System.String,System.Type[],System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作获得属性值
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.OperatePropertyValue(System.Object,System.String,System.Type[],System.Object[],PublicClass.Bean.BeanBandingFlags,System.String)">
            <summary>
            进行操作获得属性值或者赋予属性值操作
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <param name="operate">Get/Set</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.Invoke(System.Object,System.String,System.Object[])">
            <summary>
            通过对象参数模糊确定方法并调用返回结果
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性名称 开头字母不大写</param>
            <param name="para">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.CreateInstance(System.String,System.String)">
            <summary>
            创建无参数对象实例
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.CreateInstance(System.String,System.String,System.Object[])">
            <summary>
            创建多参数对象实例
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.Close(System.Object)">
            <summary>
            模拟调用无参数Close方法然后根据是否IDispose对象进行销毁
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToBoolean(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToDouble(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToSingle(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToDecimal(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToByte(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToSByte(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToInt16(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToUInt16(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToInt32(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToUInt32(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToInt64(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToUInt64(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToDateTime(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToChar(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanTool.ToString(System.Object[])">
             <summary>
            
             </summary>
             <param name="array"></param>
             <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.SetPropertyValueSP(System.String,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.SetPropertyValueSP(System.String,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanClass.SetPropertyValue(System.String,System.Object[])">
            <summary>
            尝试所有类型方法进行操作设置属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.SetPropertyValue(System.String,System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作设置属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.SetPropertyValueSP(System.String,System.Type,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.SetPropertyValueSP(System.String,System.Type,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanClass.SetPropertyValue(System.String,System.Type[],System.Object[])">
            <summary>
            尝试所有类型方法进行操作设置属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.SetPropertyValue(System.String,System.Type[],System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作设置属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.GetPropertyValue(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.GetPropertyValue(System.String,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.GetPropertyValueSP(System.String,System.Type,System.Object)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:PublicClass.Bean.BeanClass.GetPropertyValueSP(System.String,System.Type,System.Object,PublicClass.Bean.BeanBandingFlags)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.Bean.BeanClass.GetPropertyValue(System.String,System.Type[],System.Object[])">
            <summary>
            尝试所有类型方法进行操作获得属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.GetPropertyValue(System.String,System.Type[],System.Object[],PublicClass.Bean.BeanBandingFlags)">
            <summary>
            进行操作获得属性值
            </summary>
            <param name="this.defaultAim">调用对象</param>
            <param name="name">方法名 属性</param>
            <param name="paraTypes">参数类型 属性类型</param>
            <param name="paras">属性值</param>
            <param name="flag">尝试那些类型</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.Invoke(System.String,System.Object[])">
            <summary>
            通过对象参数模糊确定方法并调用返回结果
            </summary>
            <param name="aim">调用对象</param>
            <param name="name">方法名 属性名称 开头字母不大写</param>
            <param name="para">属性值</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.GetFieldNames">
            <summary>
            获得多少个Bean方法的属性方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.GetGetFieldNames">
            <summary>
            获得多少个Bean方法的属性方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.BeanClass.GetSetFieldNames">
            <summary>
            获得多少个Bean方法的属性方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg._EventHandleDefault(System.Object,System.EventArgs)">
            <summary>
            System.EventHandle的默认实现
            </summary>
            <param name="sender"></param>
            <param name="e"></param>        
        </member>
        <member name="M:PublicClass.Event.EventArg._EventHandleDefault(System.Object,PublicClass.Event.EventArg)">
            <summary>
            EventHandle的默认实现
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg._CommonEventHandleDefault(PublicClass.Event.EventArg)">
            <summary>
            CommonEventHandle的默认实现
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg._CommandEventHandleDefault">
            <summary>
            CommandEventHandle的默认实现
            </summary>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallEventSafely(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            EventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallEventSafely(PublicClass.Event.EventHandle,System.Object,PublicClass.Event.EventArg)">
            <summary>
            EventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallEventSafely(PublicClass.Event.CommonEventHandle,PublicClass.Event.EventArg)">
            <summary>
             CommonEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallEventSafely(PublicClass.Event.CommandEventHandle)">
            <summary>
            CommandEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallCommonEventSafely(PublicClass.Event.CommonEventHandle,PublicClass.Event.EventArg)">
            <summary>
             CommonEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.CallCommandEventSafely(PublicClass.Event.CommandEventHandle)">
            <summary>
            CommandEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetLevel">
            <summary>
            获得事件级别
            </summary>
            <returns></returns>
        </member>
        <member name="F:PublicClass.Event.EventArg.eventNum">
            <summary>
            事件编号 为-1时说明未定义
            </summary>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetEventNumber">
            <summary>
            获得事件编号 为-1时说明未定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.SetCancle(System.Boolean)">
             <summary>
            设置事件是否可以取消
             </summary>
             <param name="cancle"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetCancle">
            <summary>
            获取事件是否可以取消
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetCancle(System.Boolean)">
            <summary>
            返回真实的值 如果曾经被人设置过值 那么获得的就是被设置过的值 如果不是那么获得是这次设置的值 相当于设置默认值
            </summary>
            <param name="rCancle"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor">
            <summary>
            无参数 且不允许改变
            </summary>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置
            </summary>
            <param name="size">事件参数数目</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel)">
            <summary>
            实现相关的数组参数设置 默认允许设置
            </summary>
            <param name="level">事件级别</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置
            </summary>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置
            </summary>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置 默认无事件号 事件级别为Comment
            </summary>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置 默认无事件号 事件级别为Comment
            </summary>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="size">事件参数大小</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32,System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(System.Int32,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="size">事件数目</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认可以设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="size">事件参数数目</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[])">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Event.EventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="F:PublicClass.Event.EventArg.overRide">
            <summary>
            是否允许赋值操作
            </summary>
        </member>
        <member name="M:PublicClass.Event.EventArg.AllowOverride">
            <summary>
            是否允许覆盖
            </summary>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetMaxLength">
            <summary>
            建议覆盖
            </summary>
            <returns>返回最大值</returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.SetPara(System.Object[])">
            <summary>
            用于继承子类重新初始化参数类
            </summary>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetPara(System.Int32)">
            <summary>
            根据制定位置获取参数
            </summary>
            <param name="id">从0开始</param>
            <returns>根据ID 返回制定的参数值</returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.SetPara(System.Int32,System.Object)">
            <summary>
            设置参数数组相应位置的值
            </summary>
            <param name="id">数组位置参数（从0开始）</param>
            <param name="data">具体的数据值</param>
            <returns>这个位置的原有数据</returns>
            <exception>任何可能的错误（超出边界）</exception>
        </member>
        <member name="M:PublicClass.Event.EventArg.ToStringOfPara(System.Int32)">
            <summary>
            数组相对Super的MAXLENGTH位置参数（从0开始）
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetLength">
            <summary>
            返回参数数组长度 如果为空则返回-1
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.IsEmpty">
            <summary>
            返回参数数组中的值是否都为null而不是根据数组的大小来判断的！
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.Equals(System.Object)">
            <summary>
            重写值是否相等的方法
            </summary>
            <param name="obj"></param>
            <returns>返回值是否等于输入的参数</returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.Equals(PublicClass.Event.EventArg)">
            <summary>
            重写值是否相等的方法
            </summary>
            <param name="obj">对比参数</param>
            <returns>返回值是否等于输入的参数</returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.GetHashCode">
            <summary>
            重载Hash算法作各成员Hash算法的加法余数运算
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.CompareTo(System.Object)">
            <summary>
            实现IComparable中的方法实现对另一个对象的比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.CompareTo(PublicClass.Event.EventArg)">
            <summary>
             先判断是否相等然后 根据hashCode值判断大小
            </summary>
            <param name="o"></param>
            <returns>是否相等如果不等使用hashCode判断</returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.Compare(PublicClass.Event.EventArg,PublicClass.Event.EventArg)">
            <summary>
            实现IComparer EventArg 接口的方法 比较2个EventArg类型的大小
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.Compare(System.Object,System.Object)">
            <summary>
            重载IComparer接口的方法 比较2个object类型的大小
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.CreateNewInstance">
            <summary>
            调用对象的无参数构造函数产生新的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Event.EventArg.Clone">
            <summary>
            如果想使用Clone方法必须声明一个空参数构造函数或覆盖CreateNewInstance方法或者覆盖本方法
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Event.EventArg.EventNumber">
            <summary>
            获得事件编号 为-1时说明未定义
            </summary>
        </member>
        <member name="P:PublicClass.Event.EventArg.Cancle">
            <summary>
            是否可以取消
            </summary>
        </member>
        <member name="P:PublicClass.Event.EventArg.Override">
            <summary>
            是否允许覆盖
            </summary>
        </member>
        <member name="P:PublicClass.Event.EventArg.Item(System.Int32)">
            <summary>
            这个属性满足C#习惯 但不支持使用 与GetPara同意
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Event.EventArg.Length">
            <summary>
            返回参数数组长度 如果为空则返回-1
            </summary>
        </member>
        <member name="T:PublicClass.Collections.Pool.RefreshPool">
            <summary>
            用于便利的使用池技术的类
            </summary>
        </member>
        <member name="T:PublicClass.Collections.Pool.KeyValuePool">
            
             @author baibing
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList,System.Int32)">
            
             @param poolStaregy
                        获取策略
             @param valueSet
                        值得集合
             @param size
                        池大小
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList)">
            
             @param poolStaregy
             @param valueSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Int32)">
            
             @param poolStaregy
                        获取策略
             @param valueSet
                        值得集合
             @param size
                        池大小
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList,PublicClass.Collections.LimitNum)">
            
             @param poolStaregy
             @param valueSet
             @param num
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.IsFull">
            
             @return 是否已经到顶部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.IsEmpty">
            
             @return 是否已经到顶部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.IsButtom">
            
             @return 是否已近到底部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.IsWaitCustomerClose">
            @return isWaitCustomerClose
        </member>
        <member name="M:PublicClass.Collections.Pool.Pool.SetWaitCustomerClose(System.Boolean)">
            @param isWaitCustomerClose 要设置的 isWaitCustomerClose
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList,System.Int32,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
             @param valueSet
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
             @param valueSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Collections.IList,PublicClass.Collections.LimitNum,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
             @param valueSet
             @param num
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.#ctor(PublicClass.Collections.Pool.IPoolStaregy,System.Int32,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
             @param valueSet
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.GetKey">
            
             @return key
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.SetKey(System.Object)">
            
             @param key
                        要设置的 key
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.GetPoolValueFactory">
            
             @return pvFactory
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.SetPoolValueFactory(PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param pvFactory
                        要设置的 pvFactory
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.Get">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.Pool#get()
            
        </member>
        <member name="M:PublicClass.Collections.Pool.KeyValuePool.ObjectClose(System.Object)">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.Pool#objectClose(java.lang.object)
            
        </member>
        <member name="M:PublicClass.Collections.Pool.RefreshPool.#ctor(System.Collections.IList,System.Int32,System.Object,PublicClass.Collections.Pool.IPoolValueFactory,System.Int32)">
            <summary>
            用于便利的使用池技术的类
            </summary>
            <param name="valueSet"></param>
            <param name="size">池大小</param>
            <param name="key">默认键值</param>
            <param name="pvFactory">根据默认键值生成对象的类</param>
            <param name="waitTime">等待时间(毫秒)</param>
        </member>
        <member name="M:PublicClass.Collections.Pool.RefreshPool.#ctor(System.Int32,System.Object,PublicClass.Collections.Pool.IPoolValueFactory,System.Int32)">
            
             @param poolStaregy
             @param valueSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.RefreshPool.#ctor(System.Int32,System.Object,PublicClass.Collections.Pool.IPoolValueFactory)">
            
             @param poolStaregy
            
        </member>
        <member name="P:PublicClass.Collections.Pool.RefreshPool.Thread">
            <summary>
            请注意这里，不要对线程作任何处理，否则会引起Dispose事件混乱 默认值为1分钟清理
            </summary>
        </member>
        <member name="E:PublicClass.Collections.Pool.RefreshPool.OnDispose">
            <summary>
            刷新线程停止，一般的如果是非多线程使用就认为是池已经销毁了，否则可以认为还需要调用池的用户销毁正在使用的池内对象！
            </summary>
        </member>
        <member name="T:PublicClass.Threading.Process.CreaterPoolThread">
            <summary>
            池进程使用的池生产者线程
            </summary>
        </member>
        <member name="F:PublicClass.Threading.TimerThread.waitTime">
            <summary>
            用户定义的等待时间 毫秒
            </summary>
        </member>
        <member name="M:PublicClass.Threading.TimerThread.GetWaitTime">
            <summary>
            用户设置的等待时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:PublicClass.Threading.TimerThread.useTime">
            <summary>
            程序使用的等待时间 毫秒
            </summary>
        </member>
        <member name="M:PublicClass.Threading.TimerThread.#ctor(PublicClass.Threading.Run,System.Int32)">
            <summary>
            使用用户设置的间隔等待时间新建定时器线程 毫秒
            </summary>
            <param name="waitTime"></param>
        </member>
        <member name="F:PublicClass.Threading.TimerThread.nextTime">
            <summary>
            定义下次事件发生时间
            </summary>
        </member>
        <member name="M:PublicClass.Threading.TimerThread.GetNextTime(System.DateTime)">
            <summary>
            获取下次事件发生的时间
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Threading.TimerThread.WaitTime">
            <summary>
            用户设置的等待时间
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CreaterPoolThread.createWaitTime">
            <summary>
            生产等待时间
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.ITriggerVisiter">
            <summary>
            访问者模式，访问者类使用其子类封装调用源类方法实现目的的方法，通过被访问者适配器调用源类实现目的。
            与命令类的区别在于命令类用于对源类方法的纪录，修改和提交；访问者类则侧重统一接口的提交。
            @author baibing
            @version 2.0.81209.1
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.ReSetTriggerVisiter">
            <summary>
            封装Trigger.reSet方法
            
            @author baibing
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.SetEnableTriggerVisiter">
            <summary>
            封装Trigger.SetEnable方法
            
            @author baibing
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.TasteTriggerVisiter">
            <summary>
            封装Trigger.Taste方法
            
            @author baibing
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.DisposeTriggerVisiter">
            <summary>
            封装Trigger.Dispose方法
            
            @author baibing
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.DictionaryConfig">
            <summary>
            提供默认格式的字典Config对象
            </summary>
        </member>
        <member name="F:PublicClass.IO.Config.DictionaryConfig.ignorecase">
            <summary>
            是否自动忽略大小写
            </summary>
        </member>
        <member name="M:PublicClass.IO.Config.DictionaryConfig.CloseObject(System.Object)">
            <summary>
            用于关闭idic里面的值
            </summary>
            <param name="value"></param>
        </member>
        <!-- 对于成员“T:PublicClass.IO.Config.ADictionaryConfigConvert”忽略有格式错误的 XML 注释 -->
        <member name="T:PublicClass.IO.Config.AConfigConvert">
             <summary>
            配置生成器
            
            @author 白冰
            
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.AConfigConvert.GetAttribute(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            主要用于读取name属性
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="isNeedName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.AConfigConvert.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            返回必添属性值
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.AConfigConvert.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取Node属性key，如果属性不存在那么使用返回默认值，如果返回值设置为null，那么认为该属性必添
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="F:PublicClass.IO.Config.ADictionaryConfigConvert.ignorecase">
            <summary>
            是否自动忽略大小写
            </summary>
        </member>
        <!-- 对于成员“M:PublicClass.IO.Config.ADictionaryConfigConvert.#ctor(System.String,System.Boolean)”忽略有格式错误的 XML 注释 -->
        <member name="M:PublicClass.IO.Config.ADictionaryConfigConvert.ToConfig(System.Xml.XmlNode)">
            <summary>
            解析制定格式但节点名不同的Xml
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ADictionaryConfigConvert.ToXML(PublicClass.IO.Config.AConfig)">
            <summary>
            重新生成制定格式节点名不同的Xml
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.AppSettings(System.String)">
            <summary>
            获取AppSettings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.SetAppSettings(System.String,System.String)">
            <summary>
            设置AppSettings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.ConnectionStrings(System.String)">
            <summary>
            获取ConnectionStrings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.SetConnectionStrings(System.String,System.String)">
            <summary>
            设置ConnectionStrings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.AppSettings(PublicClass.IO.Config.ConfigManager,System.String)">
            <summary>
            获取AppSettings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.SetAppSettings(PublicClass.IO.Config.ConfigManager,System.String,System.String)">
            <summary>
            设置AppSettings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.ConnectionStrings(PublicClass.IO.Config.ConfigManager,System.String)">
            <summary>
            获取ConnectionStrings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.SetConnectionStrings(PublicClass.IO.Config.ConfigManager,System.String,System.String)">
            <summary>
            设置ConnectionStrings里面的数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagement.Dispose">
            <summary>
            删除ConfigManager
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameters.GetParas(System.String,PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            根据对象是否有属性定义进行相关赋值和设置
            </summary>
            <param name="cacheKey"></param>
            <param name="res"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameters.GetParas(System.String,PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            根据小写参数 赋值并生成DbParameter数组
            </summary>
            <param name="res"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameters.CacheParameters(System.String,System.Data.Common.DbParameter[])">
            <summary>
            add parameter array to the cache
            </summary>
            <param name="cacheKey">Key to the parameter cache</param>
            <param name="cmdParms">an array of DbParamters to be cached</param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameters.ClearParameterValues(System.Data.Common.DbParameter[])">
            <summary>
            清除parameter的值
            </summary>
            <param name="cmdParms">DbParameter数组</param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameters.GetCachedParameters(System.String)">
            <summary>
            Retrieve cached parameters
            </summary>
            <param name="cacheKey">key used to lookup parameters</param>
            <returns>Cached DbParamters array</returns>
        </member>
        <member name="P:PublicClass.Db.Ni.NiDataParameters.IsAutoCacheParameters">
            <summary>
            是否自动缓存Parameters 默认为真
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataCommand.ExcuteCommand(PublicClass.Db.Ni.IDataResource,System.Data.Common.DbCommand,PublicClass.Db.Ni.NiDataResult)">
            <summary>
            用于执行各种类型的命令
            </summary>
            <param name="command"></param>
            <param name="result"></param>
        </member>
        <member name="T:PublicClass.Collections.Pool.PoolRefreshThread">
            
             @author baibing
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolRefreshThread.#ctor(PublicClass.Collections.Pool.Pool,System.Int32,PublicClass.Collections.Pool.IPoolRefreshStaregy)">
            
             @param waitTime
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolRefreshThread.#ctor(PublicClass.Collections.Pool.Pool,PublicClass.Collections.Pool.IPoolRefreshStaregy)">
            
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolRefreshThread.SetRefreshPoolStaregy(PublicClass.Collections.Pool.IPoolRefreshStaregy)">
            
             @param box
                        要设置的 box
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolRefreshThread.GetPool">
            
             @return pool
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolRefreshThread.SetPool(PublicClass.Collections.Pool.Pool)">
            
             @param pool
                        要设置的 pool
            
        </member>
        <member name="T:PublicClass.Collections.Pool.IPoolRefreshStaregy">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicClass.Collections.Pool.IPoolStaregy">
            <summary>
            设定池的存取方式主要是决定池是否可以冗余，存取顺序
            </summary>
        </member>
        <member name="M:PublicClass.Collections.Pool.IPoolRefreshStaregy.AllowDel">
            <summary>
            是否可以删除
            注意它虽然继承IPoolStaregy但实际上和上一个接口处理的事情不同，而且更复杂。知识方法恰巧相同
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Collections.Pool.IKeyValuePoolFactory`1">
            <summary>
            KeyValuePool工厂
            </summary>
            <typeparam name="K"></typeparam>
        </member>
        <member name="M:PublicClass.Collections.Pool.IKeyValuePoolFactory`1.CreateKeyValuePool(`0)">
             <summary>
            处理建值池的新建操作 
             </summary>
             <param name="key"></param>
             <returns></returns>
        </member>
        <member name="T:PublicClass.Collections.LimitNum">
            <summary>
             本类用于提供对某个数值的限制访问。所有增加/减少方法为同步方法。提供同步的同时对某个对象进行唤醒操作！  
             LimitNum.increase(this)是可以正常使用的！      
            </summary>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            分别初始化 最大，最小，初始，步长值
            </summary>
            <param name="max">设置最大值</param>
            <param name="min">设置最小值</param>
            <param name="init">设置初始值</param>
            <param name="step">设置步长值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            分别初始化 最大，最小，初始，步长值默认为1
            </summary>
            <param name="max">设置最大值</param>
            <param name="min">设置最小值</param>
            <param name="init">设置初始值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.#ctor(System.Int32,System.Int32)">
            <summary>
            分别初始化 最大，最小，初始默认为最小值，步长值默认为1
            </summary>
            <param name="max">设置最大值</param>
            <param name="min">设置最小值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.#ctor(System.Int32)">
            <summary>
            分别初始化 最大，最小默认为0，初始默认为最小值，步长值默认为1
            </summary>
            <param name="max">设置最大值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.#ctor">
            <summary>
            分别初始化 最大默认为Int最大值MAX_VALUE，最小默认为0，初始默认为最小值，步长值默认为1
            </summary>
            <param name="max">设置最大值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.SetNow(System.Int32)">
            <summary>
            设置现值前，检查是否超出限制，否则抛出错误。
            </summary>
            <param name="data">设置现值</param>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Increase">
            <summary>
            增加一个步长
            </summary>
            <returns>现值</returns>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Increase(System.Int32)">
            <summary>
            增加一个数值 
            </summary>
            <param name="Step">数值</param>
            <returns>现值</returns>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Decrease">
            <summary>
            减少一个步长
            </summary>
            <param name="Step">数值</param>
            <returns>现值</returns>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Decrease(System.Int32)">
            <summary>
            减少一个数值 
            </summary>
            <param name="Step">数值</param>
            <returns>现值</returns>
            <exception >如果现值超出限制抛出错误IndexOutOfRangeException</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.GetNow">
            <summary>
            返回now
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.GetMax">
            <summary>
            返回Max值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.GetMin">
            <summary>
            返回min值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.GetStep">
            <summary>
            返回Step值
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Equals(System.Object)">
            <summary>
            覆盖Equals方法 
            </summary>
            <param name="arg0">针对一般的object对象</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Equals(PublicClass.Collections.LimitNum)">
            <summary>
            覆盖Equals方法 
            </summary>
            <param name="e">针对LimitNum对象</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.Equals(System.Int32)">
            <summary>
            覆盖Equals方法
            </summary>
            <param name="e">针对int对象</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.GetHashCode">
            <summary>
            覆盖获取HashCode方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.ToString">
            <summary>
            返回字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.IsFull">
            <summary>
            是否已经到顶部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.IsEmpty">
            <summary>
            是否为0
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitNum.IsButtom">
            <summary>
            是否已近到底部
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Collections.LimitNum.Now">
            <summary>
            获得Now值
            </summary>
        </member>
        <member name="P:PublicClass.Collections.LimitNum.Max">
            <summary>
            获得Max值
            </summary>
        </member>
        <member name="P:PublicClass.Collections.LimitNum.Min">
            <summary>
            获得Min值
            </summary>
        </member>
        <member name="P:PublicClass.Collections.LimitNum.Step">
            <summary>
            获得Step值
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.AObjectContainer">
            <summary>
            主要用于代理方式处理对象的保持（单例/新对象/池）
            请外部人员在生成对象后最好返回这个对象
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.IClosable">
            <summary>
            尽量继承以实现退出时关闭资源
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectContainer.CreateObject">
            <summary>
            在不得已的情况下生成新对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectContainer.GetValue">
            <summary>
            用于提供对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectContainer.SetValue(System.Object)">
            <summary>
            用于缓存或者关闭对象
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:PublicClass.Net.ServerEventArg.#ctor(System.Net.Sockets.Socket)">
            <summary>
            通过使用Socket初始化ServerEventArg参数类	 
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:PublicClass.Net.ServerEventArg.getSocket">
             <summary>
            获得socket对象         
             </summary>
             <returns></returns>
        </member>
        <member name="T:PublicClass.IO.Config.DirectoryConfigResource">
            <summary>
            针对整个文件夹的监控（不包含下级文件夹）
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.IDataAbstractFactory">
            <summary>
            抽象工厂接口
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.IDataAbstractBase">
            <summary>
            数据基本对象接口
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataAbstractBase.CreateCommand">
            <summary>
            新建一个数据库命令对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataAbstractBase.CreateAdapter">
            <summary>
            新建一个数据库适配器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataAbstractBase.CreateParameter">
            <summary>
            新建一个数据库参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataAbstractBase.ParseType(System.String)">
            <summary>
            用于数据库类型转换
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataAbstractFactory.CreateConnection">
            <summary>
            新建一个数据库联接对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Db.Ni.IDataResource">
            <summary>
            数据源接口
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataResource.GetConnection">
            <summary>
            用于获得开放的一个数据库联接
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.IDataResource.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            使用完成返回这个数据库联接，由数据源对象管理连接的关闭。
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.DoReader(System.Data.Common.DbDataReader)">
            <summary>
            调用Reader方法 触发处理事件！
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetCell(System.Int32,System.Int32)">
            <summary>
            获得制定表/列的数据
            </summary>
            <param name="table"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetCell(System.String,System.String)">
            <summary>
            获得制定表/列的数据
            </summary>
            <param name="table"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetCell(System.Int32)">
            <summary>
            获得第一张表/列的数据
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetCell(System.String)">
            <summary>
            获得第一张表/列的数据
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetFirstCell(System.Int32)">
            <summary>
            获得制定表第一列的数据
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetFirstCell(System.String)">
            <summary>
            获得制定表第一列的数据
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.GetFirstCell">
            <summary>
            获得第一张表第一列的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.Fill(PublicClass.Db.Ni.IRowToObject,System.Int32,System.Int32)">
            <summary>
            调用其自身方法填充对象 可以使用BeanTool.Transport方法实现这个功能
            </summary>
            <param name="o"></param>
            <param name="table"></param>
            <param name="row"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.Fill(PublicClass.Db.Ni.IRowToObject,System.String,System.Int32)">
            <summary>
            调用其自身方法填充对象
            </summary>
            <param name="o"></param>
            <param name="table"></param>
            <param name="row"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.Fill(System.Type,System.Data.DataTable)">
            <summary>
            批量获取无参构造的对象
            </summary>
            <param name="t"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.Fill(System.Type,System.String)">
            <summary>
            批量获取无参构造的对象
            </summary>
            <param name="t"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataResult.Fill(System.Type,System.Int32)">
            <summary>
            批量获取无参构造的对象
            </summary>
            <param name="t"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Db.Ni.NiDataResult.OutParameter">
            <summary>
            Key应该是对象全路径名.属性（参数属性前面有@的）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="E:PublicClass.Db.Ni.NiDataResult.ReaderEvent">
            <summary>
            Reader事件 
            </summary>
        </member>
        <member name="T:PublicClass.Bean.BeanBandingFlags">
            <summary>
            转换方式级别
            </summary>
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.Field">
            <summary>
            公共变量
            </summary>
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.BeanMethod">
            <summary>
            类Java的Bean方式方法
            </summary>
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.Map">
            <summary>
            使用类Map的Get/Set方式的方法
            </summary>
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.Property">
            <summary>
            .Net 属性
            </summary>        
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.This">
            <summary>
            .Net this属性方式 
            </summary>
        </member>
        <member name="F:PublicClass.Bean.BeanBandingFlags.All">
            <summary>
            全部可能
            </summary>
        </member>
        <member name="M:PublicClass.Bean.StringMethodComparator.GetStringTypeCount(System.Reflection.ParameterInfo[])">
            <summary>
            获取参数中string类型的数目
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Threading.Process.CCProcess">
            <summary>
            主要用来处理生产者/消费者模式问题 并提供进程模式方式的解决框架
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.crod">
            <summary>
            创建对象的方法代理
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.cuod">
            <summary>
            消费对象的方法代理
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.createrNum">
            <summary>
            生产者数目
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.GetCreaterNum">
            <summary>
            获得生产者数目
            </summary>
            <returns></returns>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.customerNum">
            <summary>
            消费者数目
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.GetCustomerNum">
            <summary>
            获得消费者数目
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.#ctor(PublicClass.Threading.Process.CreaterAction,System.Int32,PublicClass.Threading.Process.CustomobjectDel,System.Int32)">
            <summary>
            根据对象生成生产者方法 消费者方法 缓冲区为10
            </summary>
            <param name="crod"></param>
            <param name="creater"></param>
            <param name="cuod"></param>
            <param name="customer"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.#ctor(PublicClass.Threading.Process.CreaterAction,System.Int32,PublicClass.Threading.Process.CustomobjectDel,System.Int32,System.Int32)">
            <summary>
            根据对象生成生产者方法 消费者方法
            </summary>
            <param name="crod"></param>
            <param name="creater"></param>
            <param name="cuod"></param>
            <param name="customer"></param>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.capacity">
            <summary>
            缓冲队列大小
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.queue">
            <summary>
            共用的限制对象（消息）队列
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.createWaitTime">
            <summary>
            生产者线程等待时间
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.customWaitTime">
            <summary>
            消费者线程等待时间 默认半秒钟 主要为了对关闭操作进行灵敏的反应
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.Init">
            <summary>
            初始化操作
            完成 共用的消息队列的大小
            完成 生产者队列的新建
            完成 消费者队列的新建
            </summary>
            <exception >所有可能抛出的错误</exception>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.DecideStop">
            <summary>
            决定是否停止
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CCProcess.Start">
            <summary>
            先启动消费者 后启动生产者 允许暂停/继续操作
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCProcess.isStop">
            <summary>
            说明是不是主动停止 从而防止多次启动
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.CCProcess.CreaterNum">
            <summary>
            生产者数目
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.CCProcess.CustomerNum">
            <summary>
            消费者数目
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.CCProcess.CreateWaitTime">
            <summary>
            生产者当队列满时等待时间 默认半秒钟 主要为了对关闭操作进行灵敏的反应
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.CCProcess.CustomWaitTime">
            <summary>
            生产者当队列满时等待时间 默认半秒钟 主要为了对关闭操作进行灵敏的反应
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.LengthAndCronNameTrigger">
            <summary>
            长度与克隆文件名触发器，
            其会产生根据时间与文件长度产生的克隆文件名
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.INameTrigger">
            <summary>
            太矛盾了这里要求既是Trigger又是INameTrigger
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LengthAndCronNameTrigger.#ctor(System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="limitLeng">Byte数目</param>
            <param name="cronExpression">克隆表达式</param>
            <param name="timeFormat">时间格式化串</param>
        </member>
        <member name="M:PublicClass.IO.Log.LengthAndCronNameTrigger.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cronExpression"></param>
            <param name="timeFormat"></param>
        </member>
        <member name="M:PublicClass.Event.ExceptionEventArg.#ctor(System.Exception)">
            <summary>
            用于将Exception对象获得
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:PublicClass.Db.Ni.NiInstanceDataResource">
            <summary>
            对于数据库对象只负责生成与关闭，不负责管理
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.ADataResource">
            <summary>
            数据源父类
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.ADataResource.CreateConnection">
            <summary>
            建议进行健康检查方式处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.ADataResource.GetRandomNum(System.Int32)">
            <summary>
            这里简单实现随机读库。建议可以添加方法实现健康检查等方式进行处理
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiInstanceDataResource.GetConnection">
            <summary>
            自动根据数据库连接字符串生成连通的数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiInstanceDataResource.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            返回连接即可关闭
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:PublicClass.Db.Ni.MySQLFactory">
            <summary>
            适用于MySQL数据库的工厂，特别注意其ParseType的错误
            注意连接字符串内添加 oldsyntax=true
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.CreateMode">
            <summary>
            创建模式
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMode.Static">
            <summary>
            静态的
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMode.Instance">
            <summary>
            每次都新建
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMode.Pool">
            <summary>
            池方式
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.ILogRecordFormatter">
            <summary>
            LogRecord转换为String
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.PoolObjectContainer">
            <summary>
            池方式对象容器
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.PoolObjectContainer.#ctor(System.Int32,System.Int32,System.Int32,PublicClass.Bean.Middler.AObjectCreater)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="waitTime"></param>
            <param name="creater"></param>
        </member>
        <member name="M:PublicClass.Threading.TimerEventArg.GetNow">
            <summary>
            返回此次运行的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.TimerEventArg.GetNext">
            <summary>
            返回下次运行的时间
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Threading.TimerEventArg.Now">
            <summary>
            返回此次运行的时间
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Threading.TimerEventArg.Next">
            <summary>
            返回下次运行的时间
            </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromFile(PublicClass.IO.Config.ConfigManager,System.IO.FileInfo,System.Text.Encoding,System.Int32,System.TimeSpan)">
            <summary>
            用于按照文件生成ConfigManager对象
            </summary>
            <param name="manager"></param>
            <param name="file"></param>
            <param name="encoding"></param>
            <param name="limit"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromFile(PublicClass.IO.Config.ConfigManager,System.IO.FileInfo,System.Text.Encoding)">
            <summary>
            用于按照文件生成ConfigManager对象
            </summary>
            <param name="manager"></param>
            <param name="file"></param>
            <param name="encoding"></param>
            <param name="limit">500</param>
            <param name="timeSpan">1分钟</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromFile(PublicClass.IO.Config.ConfigManager,System.IO.FileInfo)">
            <summary>
            用于按照文件生成ConfigManager对象
            </summary>
            <param name="manager">可以填写为空</param>
            <param name="file"></param>
            <param name="encoding">系统字符集</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromFile(PublicClass.IO.Config.ConfigManager,System.String)">
            <summary>
            用于按照文件生成ConfigManager对象
            </summary>
            <param name="manager">可以填写为空</param>
            <param name="file"></param>
            <param name="encoding">系统字符集</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromDirectorys(System.Collections.Generic.IDictionary{System.String,PublicClass.IO.Config.ConfigManager},PublicClass.IO.Config.ConfigManager,System.String,System.Text.Encoding,System.Int32,System.TimeSpan)">
            <summary>
            用于按照文件夹（包含子文件夹）生成ConfigManager组对象
            </summary>
            <param name="manager"></param>
            <param name="file"></param>
            <param name="encoding"></param>
            <param name="limit"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromDirectory(PublicClass.IO.Config.ConfigManager,System.String,System.Text.Encoding,System.Int32,System.TimeSpan)">
            <summary>
            用于按照文件夹生成ConfigManager对象
            </summary>
            <param name="manager"></param>
            <param name="file"></param>
            <param name="encoding"></param>
            <param name="limit"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromDirectory(PublicClass.IO.Config.ConfigManager,System.String,System.Text.Encoding)">
            <summary>
            用于按照文件夹生成ConfigManager对象
            </summary>
            <param name="manager"></param>
            <param name="Directory"></param>
            <param name="encoding"></param>
            <param name="limit">500</param>
            <param name="timeSpan">1分钟</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetConfigManagerFromDirectory(PublicClass.IO.Config.ConfigManager,System.String)">
            <summary>
            用于按照文件夹生成ConfigManager对象
            </summary>
            <param name="manager">可以填写为空</param>
            <param name="Directory"></param>
            <param name="encoding">系统字符集</param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetApplicationConfigManager">
            <summary>
            用于获取与程序同名的pcf配置文件，一般格式为 程序名+".pcf" 如test.exe.pcf
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetApplicationConfigManager(System.String)">
            <summary>
            用于获取程序运行目录下的pcf配置文件，一般格式为 程序名+".pcf" 如test.exe.pcf
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetApplicationConfigManager(PublicClass.IO.Config.ConfigManager,System.String)">
            <summary>
            用于获取程序运行目录下的pcf配置文件，一般格式为 程序名+".pcf" 如test.exe.pcf
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManagerFactory.GetBassConfigManager">
            <summary>
            用于获取默认的基本配置文件信息，如程序执行文件夹内的base.pcf文件。
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Collections.Pool.PoolEventArg">
            
             @author baibing
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor">
            
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32)">
            
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel)">
            
             @param level
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Object)">
            
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Object[])">
            
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Object,System.Boolean)">
            
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Object[],System.Boolean)">
            
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32,System.Int32)">
            
             @param eventNum
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32,System.Object)">
            
             @param eventNum
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32,System.Object[])">
            
             @param eventNum
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32,System.Object,System.Boolean)">
            
             @param eventNum
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(System.Int32,System.Object[],System.Boolean)">
            
             @param eventNum
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32)">
            
             @param level
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object)">
            
             @param level
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[])">
            
             @param level
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object,System.Boolean)">
            
             @param level
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[],System.Boolean)">
            
             @param level
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object)">
            
             @param level
             @param eventNum
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object,System.Boolean)">
            
             @param level
             @param eventNum
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Int32)">
            
             @param level
             @param eventNum
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[])">
            
             @param level
             @param eventNum
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[],System.Boolean)">
            
             @param level
             @param eventNum
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.GetValue">
            
             @return value
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg._EventHandleDefault(System.Object,PublicClass.Collections.Pool.PoolEventArg)">
            <summary>
            EventHandle的默认实现
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolEventArg.CallEventSafely(PublicClass.Event.EEventHandle{PublicClass.Collections.Pool.PoolEventArg},System.Object,PublicClass.Collections.Pool.PoolEventArg)">
            <summary>
            EventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PublicClass.Collections.Pool.ClosePoolStaregy">
            
             关闭情况下的PoolStaregy
             
             @author baibing
            
        </member>
        <member name="T:PublicClass.Bean.Middler.MiddlerSetParameter">
            <summary>
            设置参数类 继承Name参数类但是其调用的方法参数不同
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.NameMiddlerGetParameter">
            <summary>
            通过名字获取相关值
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.MiddlerGetParameter">
            <summary>
            获取参数类
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerGetParameter.#ctor(System.String)">
            <summary>
            中介者获取参数
            </summary>
            <param name="app"></param>
            <param name="name"></param>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerGetParameter.GetValue(PublicClass.Bean.Middler.MiddlerConfig)">
            <summary>
            访问者模式设定其访问的具体方法
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Bean.Middler.MiddlerGetParameter.Application">
            <summary>
            应用域名
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.NameMiddlerGetParameter.#ctor(System.String,System.String)">
            <summary>
            通过名字获取相关值
            </summary>
            <param name="app"></param>
            <param name="name"></param>
        </member>
        <member name="T:PublicClass.Bean.Middler.AObjectCreater">
            <summary>
            主要用于处理以 构造函数/Bean/工厂方式生成对象
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.#ctor(System.String,System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            装配件名，类名，生成者参数 null或者空装配件名表明已经编译在一起的DLL
            </summary>
            <param name="dll"></param>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.#ctor(System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            null或者空装配件名表明已经编译在一起的DLL
            </summary>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.GetCreaterParameters">
            <summary>
            获取生成者参数类
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.GetTypeName">
            <summary>
            获取类的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.GetDll">
            <summary>
            获取装配件名
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AObjectCreater.GetObject">
            <summary>
            用于生成对象
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.FactoryBeanCreater.#ctor(System.String,System.String,System.Int32,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            初始化参数
            </summary>
            <param name="dll"></param>
            <param name="type"></param>
            <param name="constructorParaLength">构造函数参数长度</param>
            <param name="paras"></param>
        </member>
        <member name="T:PublicClass.IO.Log.Listener">
            <summary>
            默认Listener
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.Listener.isAnd">
            <summary>
            是否全部Trigger都为真才记录，否则只要有一个Trigger为真那么就记录
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.Listener.#ctor(PublicClass.Module.Trigger.ATrigger[],PublicClass.IO.Log.ILogRecordFormatter,PublicClass.IO.Log.ILogResource[],System.Boolean)">
            <summary>
            根据isAnd,判断是否在Trigger全部通过的情况下
            </summary>
            <param name="triggers"></param>
            <param name="formatter"></param>
            <param name="resources"></param>
            <param name="isAnd">是否全部Trigger都为真才记录，否则只要有一个Trigger为真那么就记录,默认为真</param>
        </member>
        <member name="M:PublicClass.IO.Log.Listener.#ctor(PublicClass.Module.Trigger.ATrigger[],PublicClass.IO.Log.ILogRecordFormatter,PublicClass.IO.Log.ILogResource)">
            <summary>
            根据Trigger如果全部通过的情况下
            </summary>
            <param name="triggers"></param>
            <param name="formatter"></param>
            <param name="resources"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Listener.#ctor(PublicClass.Module.Trigger.ATrigger[],PublicClass.IO.Log.ILogRecordFormatter,PublicClass.IO.Log.ILogResource[])">
            <summary>
            根据Trigger如果全部通过的情况下
            </summary>
            <param name="triggers"></param>
            <param name="formatter"></param>
            <param name="resources"></param>
        </member>
        <member name="M:PublicClass.IO.Log.Listener.#ctor(PublicClass.Module.Trigger.ATrigger,PublicClass.IO.Log.ILogRecordFormatter,PublicClass.IO.Log.ILogResource)">
            <summary>
            根据Trigger如果全部通过的情况下
            </summary>
            <param name="trigger"></param>
            <param name="formatter"></param>
            <param name="res"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiQueryDataCommand.FillDataTable(System.Data.DataSet,System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            这里主要是对表的一些设置
            </summary>
            <param name="ds"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiQueryDataCommand.FillDataTable(System.Data.DataTable,System.String,System.Object)">
            <summary>
            这里主要处理表内的具体字段
            </summary>
            <param name="dt"></param>
            <param name="name"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Collections.Pool.MapPool`2">
            
             @author baibing
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.#ctor(PublicClass.Collections.Pool.IKeyValuePoolFactory{`0},System.Int32)">
            
             @param kvpFactory
                        获取策略
             @param valueSet
                        值得集合
             @param size
                        池大小
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.#ctor(PublicClass.Collections.Pool.IKeyValuePoolFactory{`0})">
            
             @param kvpFactory
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.#ctor(System.Collections.Generic.IDictionary{`0,PublicClass.Collections.Pool.KeyValuePool},PublicClass.Collections.Pool.IKeyValuePoolFactory{`0},PublicClass.Collections.LimitNum)">
            
             @param kvpFactory
                        获取策略
             @param valueSet
             @param num
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.IsFull">
            
             @return 是否已经到顶部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.IsEmpty">
            
             @return 是否已经到顶部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.IsButtom">
            
             @return 是否已近到底部
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPool`2.SetKeyValuePoolFactory(PublicClass.Collections.Pool.IKeyValuePoolFactory{`0})">
            
             @param kvpFactory
                        要设置的 kvpFactory
            
        </member>
        <member name="M:PublicClass.Db.ConnectionPool`1.#ctor(System.Int32)">
            
             @param kvpFactory
                        获取策略
             @param valueSet
                        值得集合
             @param size
                        池大小
            
        </member>
        <member name="M:PublicClass.Db.ConnectionPool`1.#ctor">
            
             @param kvpFactory
            
        </member>
        <member name="M:PublicClass.Db.ConnectionPool`1.#ctor(System.Collections.Generic.IDictionary{`0,PublicClass.Collections.Pool.KeyValuePool},PublicClass.Collections.LimitNum)">
            
             @param kvpFactory
                        获取策略
             @param valueSet
             @param num
            
        </member>
        <member name="T:PublicClass.Collections.LimitQueue">
            <summary>
            限制类，用于处理有容量限制的Queue类 并且使用notifyAll与wait机制完成进队出队
            </summary>
        </member>
        <member name="T:PublicClass.Collections.ICoordinateLimit">
            <summary>
            用于限定限制类之间的协同唤醒.
            </summary>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.IsFull">
            <summary>
            是否已经到顶部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.IsEmpty">
            <summary>
            是否为0
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.IsButtom">
            <summary>
            是否已近到底部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.#ctor(System.Collections.Queue,System.Int32)">
            <summary>
            建立一个真正的限制ICollection
            </summary>
            <param name="coll">被限制的Collection</param>
            <param name="size">容量</param>
            <exception >初始化错误</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.GetMax">
            <summary>
            
            </summary>
            <returns>容量最大值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.GetMin">
            <summary>
            
            </summary>
            <returns>容量最小值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.GetNow">
            <summary>
            
            </summary>
            <returns>现在的值应该与Count相同意义</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitQueue.Peek">
            <summary>
            返回第一个对象 如果没有对象那么会弹出 不支持的操作错误
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.StaticObjectContainer.#ctor(PublicClass.Bean.Middler.AObjectCreater)">
            <summary>
            静态方式保存的对象
            </summary>
            <param name="creater"></param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Int32)">
            <summary>
            根据参数实例化服务线程
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Int32,System.Int32)">
            <summary>
            根据参数实例化服务线程
            </summary>
            <param name="port">监听端口</param>
            <param name="size">限制监听的数量</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Net.Sockets.ProtocolType,System.Int32)">
            <summary>
            根据参数实例化服务线程 默认监听本地127.0.0.1
            </summary>
            <param name="type">监听协议类型</param>
            <param name="port">端口</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Net.Sockets.ProtocolType,System.Int32,System.Int32)">
            <summary>
            根据参数实例化服务线程 默认监听本地127.0.0.1
            </summary>
            <param name="type">监听协议类型</param>
            <param name="port">端口</param>
            <param name="size">限制连接数目</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Net.Sockets.Socket,System.Net.EndPoint)">
            <summary>
            根据参数实例化服务线程
            </summary>
            <param name="socket">要监听的Socket</param>
            <param name="point">套接字关联</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Net.Sockets.Socket,System.Net.EndPoint,System.Int32)">
            <summary>
            根据参数实例化服务线程
            </summary>
            <param name="socket">要监听的Socket</param>
            <param name="point">套接字关联</param>
            <param name="size">限制连接数目</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.#ctor(PublicClass.Net.ServerEventHandle,System.Net.Sockets.Socket,System.Net.EndPoint,PublicClass.Collections.LimitNum)">
            <summary>
            根据参数实例化服务线程
            </summary>
            <param name="socket">要监听的Socket</param>
            <param name="point">套接字关联</param>
            <param name="num">限制连接数目</param>
        </member>
        <member name="M:PublicClass.Net.ServerThread.ReadExceptionThrowen(System.Exception)">
            <summary>
            获取Socket连接时出错，并可以使用e.SetCancle(true)方法判断是否可以忽略 默认是False 但是如果不手动设置False 那么也不会抛出错误中断线程。
            </summary>
            <param name="ex"></param>
        </member>
        <member name="E:PublicClass.Net.ServerThread.ReadExceptionThrowenEvent">
            <summary>
            获取Socket连接时出错，并可以使用e.SetCancle(true)方法判断是否可以忽略 默认是true 但是如果不手动设置False 那么也不会抛出错误中断线程。
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.XCronNode">
            <summary>
            处理*号
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.QCronNode">
            <summary>
            处理？号
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.NCronNode">
            <summary>
            处理具体数字 
            //TODO请注意星期中1-7需要改为0-6
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.DCronNode">
            <summary>
            处理逗号
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.SCronNode">
            <summary>
            -号
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.PCronNode">
            <summary>
            除号
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.ACronNode">
            <summary>
            #号 注意将1-7转为0-6
            </summary>
        </member>
        <member name="M:PublicClass.Module.CronExpression.ACronNode.GetRightDay(System.Int32,System.Int32)">
            <summary>
            得到第r个星期l是几号
            </summary>
            <param name="time"></param>
            <param name="weekDay"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Module.CronExpression.WCronNode">
            <summary>
            W号
            </summary>
        </member>
        <member name="M:PublicClass.Module.CronExpression.WCronNode.GetRightDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            得到l日附近的工作日是几号
            </summary>
            <param name="time"></param>
            <param name="weekDay"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Module.CronExpression.LCronNode">
            <summary>
            处理最后几天，或者最后一个星期几的问题
            </summary>
        </member>
        <member name="M:PublicClass.Module.CronExpression.LCronNode.GetRightDay(System.DateTime,PublicClass.Module.CronExpression.IDateTimePart)">
            <summary>
            得到l日附近的工作日是几号
            </summary>
            <param name="time"></param>
            <param name="weekDay"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Module.CronExpression.CCronNode">
            <summary>
            处理几号以后 或者星期几以后
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.INeedConfigManager">
            <summary>
            用于定义AConfigConvert是否需要ConfigManager等用于设置参数，严重慎用
            </summary>
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolClosedException.#ctor">
            
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolClosedException.#ctor(System.String)">
            
             @param message
            
        </member>
        <member name="M:PublicClass.Collections.Pool.PoolClosedException.#ctor(System.String,System.Exception)">
            
             @param message
             @param cause
            
        </member>
        <member name="T:PublicClass.Bean.Transaction.Transaction">
            <summary>
            用于事务处理
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Transaction.AddCommand(System.Object,System.String,System.Object[],PublicClass.Bean.Transaction.InvokeOrder,System.String)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="invokeParas"></param>
            <param name="order"></param>
            <param name="rollbackMethod"></param>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Transaction.AddCommand(System.Object,System.String,System.Object[],PublicClass.Bean.Transaction.InvokeOrder)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="invokeParas"></param>
            <param name="order"></param>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Transaction.AddCommand(System.Object,System.String,PublicClass.Bean.Transaction.InvokeOrder,System.String)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="order"></param>
            <param name="rollbackMethod"></param>
        </member>
        <member name="P:PublicClass.Bean.Transaction.Transaction.Commands">
            <summary>
            有关对象
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.TypeMiddlerGetParameter">
            <summary>
            返回此类型的所有相关值
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.TypeMiddlerGetParameter.#ctor(System.String,System.Type)">
            <summary>
            返回此类型的所有相关值
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.FactoryCreater.#ctor(System.String,System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            工厂方法新建对象
            </summary>
            <param name="dll"></param>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Bean.Middler.FactoryCreater.GetObject">
            <summary>
            这里很有可能产生无法实例化的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.BeanCreater.#ctor(System.String,System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            初始化参数
            </summary>
            <param name="dll"></param>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="T:PublicClass.Threading.Process.CreaterThread">
            <summary>
            生产者线程
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CreaterThread.createobject">
            <summary>
            用于生成对象的代理实例
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CreaterThread.queue">
            <summary>
            需要放入的线程 如果出现满错误 会定时等待。
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CreaterThread.waitTime">
            <summary>
            等待时间 毫秒 默认半秒钟
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.HasWaitTime">
            <summary>
            判断是否有等待时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.GetWaitTime">
            <summary>
            返回 waitTime。
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.#ctor(PublicClass.Threading.Process.CreaterAction,System.Int32,PublicClass.Collections.LimitQueue)">
            <summary>
            CreaterAction对象，线程号，限制队列对象 生成新的创建者对象 默认等待半秒钟
            </summary>
            <param name="cod">产生获得产品对象代理方法</param>
            <param name="num">线程号</param>
            <param name="queue">限制队列对象</param>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.#ctor(PublicClass.Threading.Process.CreaterAction,System.Int32,PublicClass.Collections.LimitQueue,System.Int32)">
            <summary>
            CreaterAction对象，线程号，限制队列对象，等待时间 生成新的创建者对象
            </summary>
            <param name="cod">产生获得产品对象代理方法</param>
            <param name="num">线程号</param>
            <param name="queue">限制队列对象</param>
            <param name="waitTime">等待时间</param>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.CreateTRun(System.Object,PublicClass.Event.EventArg)">
            <summary>
            用于创建对象的过程
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.CreaterThread.Createobject(System.Object,PublicClass.Event.EventArg)">
            <summary>
            允许覆盖载以生成对象
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:PublicClass.Threading.Process.CreaterThread.WaitTime">
            <summary>
            等待时间
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.CCPoolProcess.createWaitTime">
            <summary>
            生产等待时间
            </summary>
        </member>
        <member name="T:PublicClass.Net.MIME">
            主要处理MIME类型的翻译
            
            @author 白冰
            @version 1.0.60608.1
        </member>
        <member name="M:PublicClass.Net.MIME.GetType(System.String)">
            根据文件的类型获取对应的MIME解释 没有找到时为空
            
            @param url
                       文件路径
            @return
        </member>
        <member name="M:PublicClass.Net.MIME.CloneMap">
            <summary>
            复制一个键值对字典
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Module.Trigger.ParallelTriggerProxy">
            <summary>
            并行触发器代理 用来多个触发器同步测试触发，订阅一个事件等同订阅多个触发器，也可以分别订阅触发器的事件。触发器按照加入先后顺序进行触发。
            
            @author 白冰
            @version 2.0.81209.1
            
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.TimerTriggerProxy">
            <summary>
            循环触发器 按照时间（毫秒）定期触发。在SetEnable时取消
            
            @author 白冰
            @version 2.0.81209.1
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TimerTriggerProxy.#ctor(PublicClass.Module.Trigger.ATrigger,System.Int32)">
            <summary>
            @param trigger
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TimerTriggerProxy.SetEnable(System.Boolean)">
            <summary>
             （非 Javadoc）
             
             @see PublicClass.module.trigger.TriggerProxy#setEnable(bool)
             </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TimerTriggerProxy.GetWaitTime">
            <summary>
            @return waitTime
            </summary>
        </member>
        <member name="M:PublicClass.Module.Trigger.TimerTriggerProxy.SetWaitTime(System.Int32)">
            <summary>
            @param waitTime
                       要设置的 waitTime
            </summary>
        </member>
        <member name="T:PublicClass.IO.IOTool">
            <summary>
            用于处理一般的IO操作
            </summary>
        </member>
        <member name="M:PublicClass.IO.IOTool.Transport(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            用于在两个Stream之间完成交换工作 但不关闭流
            </summary>
            <param name="source">输入流</param>
            <param name="result">输出流</param>
            <param name="bufferedSize">缓存块大小</param>
        </member>
        <member name="M:PublicClass.IO.IOTool.Transport(System.IO.Stream,System.IO.Stream)">
            <summary>
            用于在两个Stream之间完成交换工作 但不关闭流 默认缓存块1024字节
            </summary>
            <param name="source">输入流</param>
            <param name="result">输出流</param>
        </member>
        <member name="M:PublicClass.IO.IOTool.Transport(System.IO.TextReader,System.IO.TextWriter,System.Int32)">
            <summary>
            用于在TextReader与TextWriter之间完成交换工作 但不关闭
            </summary>
            <param name="source">TextReader对象</param>
            <param name="result">TextWriter对象</param>
        </member>
        <member name="M:PublicClass.IO.IOTool.Transport(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            用于在TextReader与TextWriter之间完成交换工作 但不关闭 1024个字符
            </summary>
            <param name="source">TextReader对象</param>
            <param name="result">TextWriter对象</param>
        </member>
        <member name="M:PublicClass.IO.IOTool.Transport(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            在IDictionary对象之间互相转换
            </summary>
            <param name="source"></param>
            <param name="arm"></param>
        </member>
        <member name="T:PublicClass.IO.Log.TextFileLogResource">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.TextFileLogResource.#ctor(System.String,System.Text.Encoding,System.Int64,PublicClass.IO.Log.INameTrigger)">
            <summary>
            
            </summary>
            <param name="nameFormat">TextLog文件名格式字符串</param>
            <param name="encoding">字符集</param>
            <param name="buffer">缓存大小（Byte）</param>
            <param name="trigger">文件名触发器（输入为空或者文件满足某些条件时重新产生文件名）</param>
        </member>
        <member name="M:PublicClass.IO.Log.TextFileLogResource.#ctor(System.String,PublicClass.IO.Log.INameTrigger)">
            <summary>
            默认为系统字符集，默认缓冲区4K
            </summary>
            <param name="nameFormat"></param>
            <param name="trigger"></param>
        </member>
        <member name="M:PublicClass.IO.Log.TextFileLogResource.#ctor(System.String,System.Text.Encoding,PublicClass.IO.Log.INameTrigger)">
            <summary>
            默认缓冲区4K
            </summary>
            <param name="nameFormat"></param>
            <param name="trigger"></param>
        </member>
        <member name="P:PublicClass.IO.Log.TextFileLogResource.Encoding">
            <summary>
            字符集
            </summary>
        </member>
        <member name="P:PublicClass.IO.Log.TextFileLogResource.Filename">
            <summary>
            TextLog文件名
            </summary>
        </member>
        <member name="P:PublicClass.IO.Log.TextFileLogResource.NameFormat">
            <summary>
            TextLog文件名格式字符串
            </summary>
        </member>
        <member name="P:PublicClass.IO.Log.TextFileLogResource.BufferSize">
            <summary>
            缓存大小（Byte）
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.ConnectionStringsConvert">
            <summary>
            生成ConnectionStrings转换器
            </summary>
        </member>
        <member name="T:PublicClass.Collections.LimitCollection">
            <summary>
            限制类，用于处理有容量限制的Collection类 MS的接口没有单独涉及到 Map，Stack，Queue，List，Set 等相关基类的对象
            </summary>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.IsFull">
            <summary>
            是否已经到顶部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.IsEmpty">
            <summary>
            是否为0
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.IsButtom">
            <summary>
            是否已近到底部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.#ctor(System.Collections.ICollection,System.Int32)">
            <summary>
            建立一个真正的限制ICollection
            </summary>
            <param name="coll">被限制的Collection</param>
            <param name="size">容量</param>
            <exception >初始化错误</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.GetMax">
            <summary>
            
            </summary>
            <returns>容量最大值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.GetMin">
            <summary>
            
            </summary>
            <returns>容量最小值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitCollection.GetNow">
            <summary>
            
            </summary>
            <returns>现在的值应该与Count相同意义</returns>
        </member>
        <member name="T:PublicClass.Bean.Middler.MiddlerConfigConvert">
            <summary>
            标准的中介者解析器 允许用户扩展其自定义属性
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.AMiddlerConfigConvert">
            <summary>
            中介者解析器
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.ToConfig(System.Xml.XmlNode)">
            <summary>
            通过将XML解析为中介者Config
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateDefaultValues(System.Xml.XmlNode)">
            <summary>
            用于产生默认值对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateTopDictionary">
            <summary>
            返回整体使用的字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateAppDictionary">
            <summary>
            返回App使用的字典对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateContainer(System.Collections.Generic.IDictionary{System.String,PublicClass.Bean.Middler.AObjectContainer},System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues)">
            <summary>
            处理嵌套配置信息以返回容器
            </summary>
            <param name="idic"></param>
            <param name="node"></param>
            <param name="df"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateCreater(System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            创建具体构造器
            </summary>
            <param name="node"></param>
            <param name="df"></param>
            <param name="method"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateContainer(System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.String,PublicClass.Bean.Middler.AObjectCreater)">
            <summary>
            创建具体构造容器
            </summary>
            <param name="node"></param>
            <param name="mode"></param>
            <param name="creater"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.GetIsNeedName(System.String)">
            <summary>
            用于判断此方法参数是否必须有name属性一般认为Bean方法下参数必须有name属性
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.CreateParameter(System.Collections.Generic.IDictionary{System.String,PublicClass.Bean.Middler.AObjectContainer},System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.Boolean)">
            <summary>
            处理嵌套参数
            </summary>
            <param name="idic"></param>
            <param name="node"></param>
            <param name="df"></param>
            <param name="isNeedName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.AMiddlerConfigConvert.ToXML(PublicClass.IO.Config.AConfig)">
            <summary>
            将Config返转为XML文件
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.CreateDefaultValues(System.Xml.XmlNode)">
            <summary>
            使用默认的对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.CreateContainer(System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.String,PublicClass.Bean.Middler.AObjectCreater)">
            <summary>
            创建具体构造容器
            </summary>
            <param name="node"></param>
            <param name="mode"></param>
            <param name="creater"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.CreateCreater(System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.String,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            创建具体构造器
            </summary>
            <param name="node"></param>
            <param name="df"></param>
            <param name="method"></param>
            <param name="paras"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.GetTempObjectName">
            返回临时文件
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.CreateParameter(System.Collections.Generic.IDictionary{System.String,PublicClass.Bean.Middler.AObjectContainer},System.Xml.XmlNode,PublicClass.Bean.Middler.DefaultValues,System.Boolean)">
            <summary>
            处理嵌套参数
            </summary>
            <param name="idic"></param>
            <param name="node"></param>
            <param name="df"></param>
            <param name="isNeedName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.MiddlerConfigConvert.GetIsNeedName(System.String)">
            <summary>
            用于判断此方法参数是否必须有name属性一般认为Bean方法下参数必须有name属性
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Bean.Middler.CreateMethod">
            <summary>
            创建方法
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMethod.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMethod.Factory">
            <summary>
            工厂方法（无参构造函数，其余为参数方法）
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMethod.Bean">
            <summary>
            Bean方式（无参构造函数，Set方法设置属性）
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMethod.ConstructorBean">
            <summary>
            先构造后Bean属性方式混用
            </summary>
        </member>
        <member name="F:PublicClass.Bean.Middler.CreateMethod.FactoryBean">
            <summary>
            先工厂后Bean属性方式混用
            </summary>
        </member>
        <member name="T:PublicClass.Threading.Run">
            <summary>
            声明基本的执行事件
            </summary>
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor">
            
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Int32)">
            @param level
            @param eventNum
            @param size
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object,System.Boolean)">
            @param level
            @param eventNum
            @param obj
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object)">
            @param level
            @param eventNum
            @param obj
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[],System.Boolean)">
            @param level
            @param eventNum
            @param objs
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[])">
            @param level
            @param eventNum
            @param objs
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32)">
            @param level
            @param size
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Object,System.Boolean)">
            @param level
            @param obj
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Object)">
            @param level
            @param obj
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[],System.Boolean)">
            @param level
            @param objs
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[])">
            @param level
            @param objs
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(PublicClass.Event.EventLevel)">
            @param level
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32,System.Int32)">
            @param eventNum
            @param size
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32,System.Object,System.Boolean)">
            @param eventNum
            @param obj
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32,System.Object)">
            @param eventNum
            @param obj
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32,System.Object[],System.Boolean)">
            @param eventNum
            @param objs
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32,System.Object[])">
            @param eventNum
            @param objs
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Int32)">
            @param size
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Object,System.Boolean)">
            @param obj
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Object)">
            @param obj
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Object[],System.Boolean)">
            @param objs
            @param allowSet
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Object[])">
            @param objs
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.#ctor(System.Exception,PublicClass.Threading.ProtectThread,PublicClass.Event.EventArg)">
            
            @param ex
            @param td
            @param e
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.GetException">
            @return ex
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.SetException(System.Exception)">
            @param ex
                       要设置的 ex
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.GetThread">
            @return thread
        </member>
        <member name="M:PublicClass.Threading.ThreadEventArg.SetThread(PublicClass.Threading.ProtectThread)">
            @param thread
                       要设置的 thread
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg._ProcessEventHandleDefault(System.Object,PublicClass.Threading.Process.ProcessEventArg)">
            <summary>
            默认的Process事件的实现
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.CallProcessEventSafely(PublicClass.Threading.Process.ProcessEventHandle,System.Object,PublicClass.Threading.Process.ProcessEventArg)">
            <summary>
            ProcessEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.CallEventSafely(PublicClass.Threading.Process.ProcessEventHandle,System.Object,PublicClass.Threading.Process.ProcessEventArg)">
            <summary>
            ProcessEventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.GetState">
            <summary>
            获得对应的状态
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.GetException">
            <summary>
            获得对应的错误
            </summary>
        </member>
        <member name="F:PublicClass.Threading.Process.ProcessEventArg.logType">
            <summary>
            默认为Info
            </summary>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.GetLogType">
            <summary>
            获取消息日志等级
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.IO.Log.LogType,System.Int32,System.Object[])">
            <summary>
            构造对象
            </summary>
            <param name="type"></param>
            <param name="eventNum"></param>
            <param name="args"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.IO.Log.LogType,System.Int32,System.Object)">
            <summary>
            构造对象
            </summary>
            <param name="type"></param>
            <param name="eventNum"></param>
            <param name="arg"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Threading.Process.ProcessState)">
            <summary>
            构造对象
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Threading.Process.ProcessState,System.Exception,PublicClass.IO.Log.LogType,System.Object)">
            <summary>
            构造对象
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
            <param name="type"></param>
            <param name="arg"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Threading.Process.ProcessState,System.Exception,System.Object[])">
            <summary>
            构造对象
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
            <param name="args"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Threading.Process.ProcessState,System.Exception,System.Object)">
            <summary>
            构造对象
            </summary>
            <param name="state"></param>
            <param name="ex"></param>
            <param name="arg"></param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置
            </summary>
            <param name="size">事件参数数目</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel)">
            <summary>
            实现相关的数组参数设置 默认允许设置
            </summary>
            <param name="level">事件级别</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置
            </summary>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置
            </summary>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置 默认无事件号 事件级别为Comment
            </summary>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置 默认无事件号 事件级别为Comment
            </summary>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="size">事件参数大小</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32,System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(System.Int32,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="size">事件数目</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[])">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object)">
            <summary>
            实现相关的数组参数设置 默认不允许设置参数
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object,System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="obj">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Int32)">
            <summary>
            实现相关的数组参数设置 默认可以设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="size">事件参数数目</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[])">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
        </member>
        <member name="M:PublicClass.Threading.Process.ProcessEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[],System.Boolean)">
            <summary>
            实现相关的数组参数设置
            </summary>
            <param name="level">事件级别</param>
            <param name="eventNum">事件号</param>
            <param name="objs">事件参数</param>
            <param name="allowSet">是否允许设置参数</param>
        </member>
        <member name="P:PublicClass.Threading.Process.ProcessEventArg.State">
            <summary>
            程序状态
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.ProcessEventArg.Exception">
            <summary>
            程序错误
            </summary>
        </member>
        <member name="P:PublicClass.Threading.Process.ProcessEventArg.LogType">
            <summary>
            消息日志等级
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.SourceTrigger">
            <summary>
            根据LogRecord数据源判断是否可以记录
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.SourceTrigger.#ctor(System.String)">
            <summary>
            数据源
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PublicClass.IO.Log.SourceTrigger.#ctor(System.Object)">
            <summary>
            对象类名作为数据源
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:PublicClass.IO.Config.ConfigProxy">
             <summary>
            ConfigProxy代理负责默认调用ConfigManager某个Config来实现对具体Config递归调用操作
            
            @author 白冰
            @version 2.0.81212.1
            
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigProxy.#ctor(PublicClass.IO.Config.ConfigManager,System.String)">
             <summary>
            @param allowCascade
            @param manager
            @param configKey
             </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.MiddlerConfig">
            <summary>
            中介者使用的具体Config类
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.CountTrigger">
             <summary>
            
             继承Trigger 处理对于计数方式而触发的触发器。其默认算法在触发以后，触发器静止状态不再触发。复杂算法可以通过继承重载reSet方法实现，如果复杂可以通过订阅事件进行处理。
             
             @author baibing
             @version 2.1.0.70920
             
             </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.DateTimeContainer">
            <summary>
            日期保存者 用于CronNode上下传递时间
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.WindowEventLogResource">
            <summary>
            Windows日志
            </summary>
        </member>
        <member name="P:PublicClass.IO.Log.WindowEventLogResource.EventName">
            <summary>
            获取事件名
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.LogRecord">
            <summary>
            记录参数 是否发挥作用试ILogRecordFormatter而定
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.#ctor(PublicClass.IO.Log.LogType)">
            <summary>
            设置级别
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.#ctor(PublicClass.IO.Log.LogType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            设置级别和是否需要时间，是否需要日志级别描述，是否需要分隔符!
            </summary>
            <param name="type"></param>
            <param name="needDateTime"></param>
            <param name="needDiscript"></param>
            <param name="needSeparator"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetLogType">
            <summary>
             获取日志级别
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetLogType(PublicClass.IO.Log.LogType)">
            <summary>
             type
                       设置日志级别
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.IsNeedDiscript">
            <summary>
             是否需要日志级别描述
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetNeedDiscript(System.Boolean)">
            <summary>
             needDiscript
                       设置是否需要日志级别描述
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetContent">
            <summary>
             获取日志信息
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetContent(System.String)">
            <summary>
            设置日志信息
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetSource">
            <summary>
             获取日志源
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetSource(System.String)">
            <summary>
            设置日志源
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetSource(System.Object)">
            <summary>
            设置日志源
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetNum(System.Int32)">
            <summary>
            设置日志号
            </summary>
            <param name="num"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetNum">
            <summary>
            饭或日志号
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.IsNeedDateTime">
            <summary>
             是否需要日期时间
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetNeedDateTime(System.Boolean)">
            <summary>
             needDateTime
                       设置日期时间
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetRecordTime">
            <summary>
            记录时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetParams">
            <summary>
             获取参数 当非空时视作
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetParams(System.Object[])">
            <summary>
             params
                       设置参数
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.IsNeedSeparator">
            <summary>
            是否需要分割线
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetNeedSeparator(System.Boolean)">
            <summary>
            设置是否需要分割线
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.GetSeparator">
            <summary>
            获得分割线
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LogRecord.SetSeparator(System.String)">
            <summary>
            设置分割线
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:PublicClass.IO.Log.LoggerSourceDecorator">
            <summary>
            Logger源装饰器，用于
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerSourceDecorator.#ctor(PublicClass.IO.Log.Logger,System.String)">
            <summary>
            Logger源装饰器
            </summary>
            <param name="logger">内部Logger</param>
            <param name="source">源参数</param>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerSourceDecorator.#ctor(PublicClass.IO.Log.Logger,System.Object)">
            <summary>
            Logger源装饰器
            </summary>
            <param name="logger">内部Logger</param>
            <param name="source">源参数</param>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerSourceDecorator.Log(PublicClass.IO.Log.LogRecord)">
             <summary>
            根据Logger状态判断是否可以合适的记录数据 
             </summary>
             <param name="record"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerSourceDecorator.AddListener(PublicClass.IO.Log.ILogListener)">
            <summary>
            设置订阅者
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetLogger(PublicClass.IO.Log.Logger,PublicClass.IO.Log.ILogListener[])">
            <summary>
            用于设置Logger的listeners
            </summary>
            <param name="logger"></param>
            <param name="listeners"></param>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetLogger(PublicClass.IO.Log.LogType,System.Boolean,System.Boolean,PublicClass.IO.Log.ILogListener[])">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="isNeedSeparator"></param>
            <param name="listeners"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetLogger(PublicClass.IO.Log.LogType,PublicClass.IO.Log.ILogListener[])">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="listeners"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetListener(PublicClass.Module.Trigger.ATrigger[],PublicClass.IO.Log.ILogResource)">
            <summary>
            获取Listener
            </summary>
            <param name="logType"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.ILogResource)">
            <summary>
            获取Listener
            </summary>
            <param name="logType"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType,PublicClass.IO.Log.ILogResource)">
            <summary>
            获取Listener
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetListener(PublicClass.IO.Log.LogType,System.String,PublicClass.IO.Log.ILogResource)">
            <summary>
            获取Listener
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType,System.String,PublicClass.IO.Log.ILogResource)">
            <summary>
            获取Listener
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <param name="source"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventListener(PublicClass.IO.Log.LogType,System.String,System.String)">
            <summary>
            获取Windows日志Listener
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType,System.String,System.String)">
            <summary>
            获取Windows日志Listener
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <param name="source"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventListener(PublicClass.IO.Log.LogType,System.String)">
            <summary>
            获取Windows日志Listener,这里Source同时是event名
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType,System.String)">
            <summary>
            获取Windows日志Listener,这里Source同时是event名
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetConsoleListener(PublicClass.IO.Log.LogType)">
            <summary>
            获取桌面日志Listener
            </summary>
            <param name="logType"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetConsoleListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType)">
            <summary>
            获取桌面日志Listener
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetConsoleListener(PublicClass.IO.Log.LogType,System.String)">
            <summary>
            获取桌面日志Listener
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetConsoleListener(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType,System.String)">
            <summary>
            获取桌面日志Listener
            </summary>
            <param name="logType"></param>
            <param name="maxLogType"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventLogger(PublicClass.IO.Log.LogType,System.Boolean,System.Boolean,System.String)">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="isNeedSeparator"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetWindowEventLogger(PublicClass.IO.Log.LogType,System.String)">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileLogger(PublicClass.IO.Log.LogType,System.Boolean,System.Boolean,System.String,System.Text.Encoding,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="isNeedSeparator"></param>
            <param name="pathFormat">c:\Apply{0}.txt</param>
            <param name="timeFormat">{0:yyyy-MM-dd}</param>
            <param name="cronExpression">0 0 0 * * ?</param>
            <param name="encoding"></param>
            <param name="limitLength"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileLogger(PublicClass.IO.Log.LogType,System.Boolean,System.String,System.String,System.String)">
            <summary>
            获取Logger
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="isNeedSeparator"></param>
            <param name="pathFormat">c:\Apply{0}.txt</param>
            <param name="timeFormat">{0:yyyy-MM-dd}</param>
            <param name="cronExpression">0 0 0 * * ?</param>
            <param name="encoding"></param>
            <param name="limitLength"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetHourTextFileLogger(PublicClass.IO.Log.LogType,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            获取每日日志文件Logger 默认200M为一个文件大小
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetDayTextFileLogger(PublicClass.IO.Log.LogType,System.Boolean,System.String,System.Text.Encoding)">
            <summary>
            获取每日日志文件Logger 默认200M为一个文件大小
            </summary>
            <param name="type"></param>
            <param name="isNeedDiscript"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileResource(System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            获取Text文本文件源 默认200M为一个文件大小
            </summary>
            <param name="pathFormat"></param>
            <param name="encoding"></param>
            <param name="cronExpression"></param>
            <param name="timeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileResource(System.String,System.String,System.String,System.String)">
            <summary>
            获取Text文本文件源 默认200M为一个文件大小
            </summary>
            <param name="pathFormat"></param>
            <param name="encoding"></param>
            <param name="cronExpression"></param>
            <param name="timeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileResource(System.String,System.Text.Encoding,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            获取Text文本文件源 默认200M为一个文件大小
            </summary>
            <param name="pathFormat"></param>
            <param name="encoding"></param>
            <param name="buffer"></param>
            <param name="limitLength"></param>
            <param name="cronExpression"></param>
            <param name="timeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetTextFileResource(System.String,System.String,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            获取Text文本文件源 默认200M为一个文件大小
            </summary>
            <param name="pathFormat"></param>
            <param name="encoding"></param>
            <param name="buffer"></param>
            <param name="limitLength"></param>
            <param name="cronExpression"></param>
            <param name="timeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetDayTextFileResource(System.String,System.Text.Encoding)">
            <summary>
            获取每日日志文件源 默认200M为一个文件大小
            </summary>
            <param name="encoding"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetDayTextFileResource(System.String,System.String)">
            <summary>
            获取每日日志文件源 默认200M为一个文件大小
            </summary>
            <param name="encoding"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetHourTextFileResource(System.String,System.Text.Encoding)">
            <summary>
            获取每日日志文件源 默认200M为一个文件大小
            </summary>
            <param name="encoding"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.IO.Log.LoggerFactory.GetHourTextFileResource(System.String,System.String)">
            <summary>
            获取每日日志文件源 默认200M为一个文件大小
            </summary>
            <param name="encoding"></param>
            <param name="pathFormat"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.IO.Config.AppSettingsConfigConvert">
            <summary>
            生成AppSettings转换器
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.ParameterEntity">
            <summary>
            从文件中获取的参数对象
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.ParameterEntity.FillDbParameter(System.Data.Common.DbParameter,System.Object,System.Data.DbType)">
            <summary>
            使用自身属性填充DbParameter对象
            </summary>
            <param name="para"></param>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.ParameterName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.DBTypeName">
            <summary>
            DB类型名
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.DBType">
            <summary>
            DB类型名
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.ParameterDirection">
            <summary>
            参数方向
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.Nullable">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.DefaultValue">
            <summary>
            默认参数值
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.ParameterEntity.Size">
            <summary>
            参数限制值
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.NiFillDataCommand">
            <summary>
            用于填充DataSet
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.NiTemplateManager">
            <summary>
            用于快速执行管理NiTemplate对象的 取消对middler的管理
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteScalar(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteNonQuery(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplateManager.ExcuteReader(PublicClass.Bean.Middler.Middler,System.String,System.String,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="templateName"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Db.Ni.NiDataParameterAttribute">
            <summary>
            Ni框架属性 可在对象上自定义通用
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String)">
            <summary>
            参数名属性
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String)">
            <summary>
            参数名，DbType
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            参数名，nullAble
            </summary>
            <param name="name"></param>
            <param name="nullAble"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.Data.ParameterDirection)">
            <summary>
            参数名，direction
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            参数名，DbType，是否允许为空
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="nullAble"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            参数名，DbType，默认值
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Data.ParameterDirection)">
            <summary>
            参数名，DbType，参数方向
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            参数名，DbType，限制大小
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="size"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Int32,System.Data.ParameterDirection)">
            <summary>
            参数名，DbType，限制大小，参数方向
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="direction"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            参数名，DbType，限制大小，是否允许为空
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="nullAble"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Int32,System.Object)">
            <summary>
            参数名，DbType，限制大小，默认值
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiDataParameterAttribute.#ctor(System.String,System.String,System.Int32,System.Object,System.Boolean,System.Data.ParameterDirection)">
            <summary>
            参数名，DbType，限制大小，默认值,是否允许为空,参数方向
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.Clear">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.IPoolStaregy#clear()
            
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.Contains(System.Object)">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.IPoolStaregy#contains(java.lang.object)
            
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.Get">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.IPoolStaregy#get()
            
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.Remove(System.Object)">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.IPoolStaregy#remove(java.lang.object)
            
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.Set(System.Object)">
            
             （非 Javadoc）
             
             @see PublicClass.Collections.Pool.IPoolStaregy#set(java.lang.object)
            
        </member>
        <member name="M:PublicClass.Collections.Pool.CollectionPoolStaregy.CreateNewInstance">
             （非 Javadoc）
             @see PublicClass.Collections.Pool.IPoolStaregy#createNewInstance()
            
        </member>
        <member name="M:PublicClass.Collections.LimitDictionary.GetThis">
            <summary>
            对实际使用的IDictionary返回调用
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“T:PublicClass.Collections.DictionarySet”忽略有格式错误的 XML 注释 -->
        <member name="T:PublicClass.Collections.HashSet">
            <summary>
            默认使用Hashtable作为键值对应匹配
            </summary>
        </member>
        <member name="T:PublicClass.Module.Trigger.TimeTrigger">
             <summary>
            
             继承Trigger 处理对于过期时间的触发
             
             @author baibing
             @version 2.1.0.70920
             
             </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.NiTemplate">
            <summary>
            泥模板，是整个包的核心。
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.#ctor(PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.IDataParameters,PublicClass.IO.Config.ConfigManager)">
            <summary>
            泥模板构造函数 需要加入数据资源类，数据参数解析类，配置管理类
            </summary>
            <param name="resource"></param>
            <param name="paras"></param>
            <param name="ma"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.#ctor(PublicClass.Db.Ni.IDataResource,PublicClass.Db.Ni.IDataParameters)">
            <summary>
            泥模板构造函数 需要加入数据资源类，数据参数解析类 默认没有配置管理类
            </summary>
            <param name="resource"></param>
            <param name="paras"></param>
        </member>
        <member name="F:PublicClass.Db.Ni.NiTemplate.NIQUERYCOMMAND">
            <summary>
            查询方法
            </summary>
        </member>
        <member name="F:PublicClass.Db.Ni.NiTemplate.NINONQUERYCOMMAND">
            <summary>
            无查询方法
            </summary>
        </member>
        <member name="F:PublicClass.Db.Ni.NiTemplate.NIREADERCOMMAND">
            <summary>
            Reader方法
            </summary>
        </member>
        <member name="F:PublicClass.Db.Ni.NiTemplate.NIDATATABLECOMMAND">
            <summary>
            FillData方法
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Next(PublicClass.Db.Ni.NiTemplate)">
            <summary>
            请注意调用这个方法可以解决不同template之间的跨库调用问题。但是必须从队列首执行。
            </summary>
            <param name="temp"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.AddDataCommand(PublicClass.Db.Ni.IDataResource,System.Collections.Generic.LinkedList{System.Object[]},PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            严格按照调用顺序记录调用的命令
            </summary>
            <param name="resource"></param>
            <param name="lstCom"></param>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataResource,System.Collections.Generic.LinkedList{System.Object[]},PublicClass.Db.Ni.NiDataResult)">
            <summary>
            按照调用顺序执行已经记录的命令
            </summary>
            <param name="resource"></param>
            <param name="lstCom"></param>
            <param name="result"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate._Commit">
            <summary>
            事务方法提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.AddDataCommand(PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType,System.Data.Common.DbParameter[])">
            <summary>
            记录调用的命令的本地方式
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute">
            <summary>
            执行已经记录的命令的本地方式
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.IsStoredProcedure(System.String)">
            <summary>
            根据命令判断是否属于调用存储过程！
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.GetCommandType(System.String)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Excute(PublicClass.Db.Ni.IDataCommand,System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="comm"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteScalar(System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteQuery(System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteNonQuery(System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Data.CommandType,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Data.CommandType,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Data.CommandType)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,PublicClass.Db.Ni.ParameterEntity[],System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="paras"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Collections.IDictionary)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="idicValue"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String,System.Object)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.ExcuteReader(System.String)">
            <summary>
            获取查询结果
            </summary>
            <param name="commandText"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiTemplate.Dispose">
            <summary>
            首先关闭结果集，其次关闭命令组合，最后关闭资源
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.NiTemplate.Resource">
            <summary>
            资源
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.NiTemplate.Result">
            <summary>
            结果集，请注意在未操作时，结果集中没有数据
            </summary>
        </member>
        <member name="P:PublicClass.Db.Ni.NiTemplate.Transaction">
            <summary>
            是否是事务性的
            </summary>
        </member>
        <member name="T:PublicClass.Db.DBTool">
            <summary>
            需要大改 否则不可使用线程池与其他框架相结合
            </summary>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToSQLDBConnString(System.Object)">
            <summary>
            格式化联接字符串 主要将Provider=?;去掉
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToSQLDBConnString(System.String)">
            <summary>
            格式化联接字符串 主要将Provider=?;去掉
            </summary>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.Update(System.Data.Common.DbDataAdapter,System.Data.Common.DbConnection,System.Data.DataTable)">
            <summary>
            更新数据集到数据库中
            </summary>
            <param name="sda"></param>
            <param name="conn"></param>
            <param name="dt"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.Update(System.Data.Common.DbDataAdapter,System.Data.Common.DbConnection,System.Data.DataSet)">
            <summary>
            更新数据集到数据库中
            </summary>
            <param name="sda"></param>
            <param name="conn"></param>
            <param name="dt"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ExecuteNonQueryClose(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            更新数据命令到数据库中
            </summary>
            <param name="cmd"></param>
            <param name="conn"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ExecuteQuery(System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            运行数据查询指令
            </summary>
            <param name="cmd"></param>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.AddNewItem(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            添加新的数据到数据库中并返回id
            </summary>
            <param name="cmdInsert"></param>
            <param name="cmdSerMaxId"></param>
            <param name="conn"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.AddNewItemClose(System.Data.Common.DbCommand,System.Data.Common.DbCommand,System.Data.Common.DbConnection)">
            <summary>
            添加新的数据到数据库中并返回id
            </summary>
            <param name="cmdInsert"></param>
            <param name="cmdSerMaxId"></param>
            <param name="conn"></param>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.FillDataSet(System.Data.Common.DbDataAdapter,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.DataSet)">
            <summary>
            填充数据集
            </summary>
            <param name="sda"></param>
            <param name="cmdSel"></param>
            <param name="conn"></param>
            <param name="ds"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.FillDataTable(System.Data.Common.DbDataAdapter,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.DataTable)">
            <summary>
            填充数据表
            </summary>
            <param name="sda"></param>
            <param name="conn"></param>
            <param name="dt"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.Select(System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean,System.Data.Common.DbDataAdapter,System.Data.DataTable,System.Data.Common.DbConnection)">
            <summary>
            返回查询的具体值
            </summary>
            <param name="table"></param>
            <param name="where"></param>
            <param name="distinct"></param>
            <param name="top"></param>
            <param name="Desc"></param>
            <param name="sda"></param>
            <param name="dt"></param>
            <param name="conn"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.Select(System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean,System.Data.Common.DbDataAdapter,System.Data.DataSet,System.Data.Common.DbConnection)">
            <summary>
            返回查询的具体值
            </summary>
            <param name="table"></param>
            <param name="where"></param>
            <param name="distinct"></param>
            <param name="top"></param>
            <param name="Desc"></param>
            <param name="sda"></param>
            <param name="dt"></param>
            <param name="conn"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.SelectString(System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean)">
            <summary>
            获得查询字符串
            </summary>
            <param name="table"></param>
            <param name="where"></param>
            <param name="distinct"></param>
            <param name="top"></param>
            <param name="orderItem"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.SelectCountString(System.String,System.String,System.Boolean)">
            <summary>
            获得统计字符串
            </summary>
            <param name="table"></param>
            <param name="where"></param>
            <param name="distinct"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.SelectCount(System.String,System.String,System.Boolean,System.Data.Common.DbConnection)">
            <summary>
            返回查询的数目
            </summary>
            <param name="table"></param>
            <param name="where"></param>
            <param name="distinct"></param>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool._DealReader(System.Data.Common.DbDataReader,PublicClass.Event.EventArg)">
            <summary>
            默认处理Reader的方法
            </summary>
            <param name="reader"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool._DealNoReader(PublicClass.Event.EventArg)">
            <summary>
            默认处理没有Reader或者Reader没有结果集的方法
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.DoQuery(PublicClass.Db.DBTool.DealReader,System.Data.Common.DbCommand,PublicClass.Event.EventArg)">
            <summary>
            对Reader进行逐行处理
            </summary>
            <param name="dealReader">处理Reader的方法</param>
            <param name="com">相关命令对象</param>
        </member>
        <member name="M:PublicClass.Db.DBTool.DoQuery(PublicClass.Db.DBTool.DealReader,PublicClass.Db.DBTool.DealNoReader,System.Data.Common.DbCommand,PublicClass.Event.EventArg)">
            <summary>
            对Reader进行逐行处理
            </summary>
            <param name="dealReader">处理Reader的方法</param>
            <param name="dealNoReader">处理无Reader的方法</param>
            <param name="com">相关命令对象</param>
        </member>
        <member name="M:PublicClass.Db.DBTool.DoQuery(PublicClass.Db.DBTool.DealReader,System.String,System.Data.Common.DbConnection,PublicClass.Event.EventArg)">
            <summary>
            对Reader进行逐行处理
            </summary>
            <param name="dealReader">处理Reader的方法</param>
            <param name="sql">对应的SQL语句</param>
            <param name="con">数据库联接对象</param>
        </member>
        <member name="M:PublicClass.Db.DBTool.DoQuery(PublicClass.Db.DBTool.DealReader,PublicClass.Db.DBTool.DealNoReader,System.String,System.Data.Common.DbConnection,PublicClass.Event.EventArg)">
            <summary>
            对Reader进行逐行处理
            </summary>
            <param name="dealReader">处理Reader的方法</param>
            <param name="dealNoReader">处理无Reader时的方法</param>
            <param name="sql">对应的SQL语句</param>
            <param name="con">数据库联接对象</param>
        </member>
        <member name="M:PublicClass.Db.DBTool.DoQueryClose(PublicClass.Db.DBTool.DealReader,PublicClass.Db.DBTool.DealNoReader,System.String,System.Data.Common.DbConnection,PublicClass.Event.EventArg)">
            <summary>
            对Reader进行逐行处理
            </summary>
            <param name="dealReader">处理Reader的方法</param>
            <param name="dealNoReader">处理无Reader时的方法</param>
            <param name="sql">对应的SQL语句</param>
            <param name="con">数据库联接对象</param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataTable)">
            <summary>
            将数据转换成TJSON
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataTable,System.Text.StringBuilder)">
            <summary>
            将数据转换为JSON
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataView)">
            <summary>
            将数据转换成JSON
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataView,System.Text.StringBuilder)">
            <summary>
            将数据转换为JSON
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataSet,System.Text.StringBuilder)">
            <summary>
            将数据转换成TJSON格式
            </summary>
            <param name="ds"></param>
            <param name="sb"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToTJSON(System.Data.DataSet)">
            <summary>
            将数据转换成TJSON格式
            </summary>
            <param name="ds"></param>
            <param name="sb"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataTable)">
            <summary>
            将数据转换成JSON
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataTable,System.Text.StringBuilder)">
            <summary>
            将数据转换为JSON
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataView)">
            <summary>
            将数据转换成JSON
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataView,System.Text.StringBuilder)">
            <summary>
            将数据转换为JSON
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataSet,System.Text.StringBuilder)">
            <summary>
            将数据转换成JSON格式
            </summary>
            <param name="ds"></param>
            <param name="sb"></param>
        </member>
        <member name="M:PublicClass.Db.DBTool.ToJSON(System.Data.DataSet)">
            <summary>
            将数据转换成JSON格式
            </summary>
            <param name="ds"></param>
            <param name="sb"></param>
        </member>
        <member name="T:PublicClass.Db.DBTool.DealReader">
            <summary>
            处理有关Reader的方法
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:PublicClass.Db.DBTool.DealNoReader">
            <summary>
            处理没有Reader时的事件
            </summary>
        </member>
        <member name="T:PublicClass.Collections.Pool.MapPoolEventArg">
            
             @author baibing
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor">
            
             
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32)">
            
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel)">
            
             @param level
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Object)">
            
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Object[])">
            
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Object,System.Boolean)">
            
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Object[],System.Boolean)">
            
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32,System.Int32)">
            
             @param eventNum
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32,System.Object)">
            
             @param eventNum
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32,System.Object[])">
            
             @param eventNum
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32,System.Object,System.Boolean)">
            
             @param eventNum
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(System.Int32,System.Object[],System.Boolean)">
            
             @param eventNum
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32)">
            
             @param level
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object)">
            
             @param level
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[])">
            
             @param level
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object,System.Boolean)">
            
             @param level
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Object[],System.Boolean)">
            
             @param level
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object)">
            
             @param level
             @param eventNum
             @param obj
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object,System.Boolean)">
            
             @param level
             @param eventNum
             @param obj
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Int32)">
            
             @param level
             @param eventNum
             @param size
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[])">
            
             @param level
             @param eventNum
             @param objs
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.#ctor(PublicClass.Event.EventLevel,System.Int32,System.Object[],System.Boolean)">
            
             @param level
             @param eventNum
             @param objs
             @param allowSet
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.GetKey">
            
             @return key
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.SetKey(System.Object)">
            
             @param key
                        要设置的 key
            
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg._EventHandleDefault(System.Object,PublicClass.Collections.Pool.MapPoolEventArg)">
            <summary>
            EventHandle的默认实现
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:PublicClass.Collections.Pool.MapPoolEventArg.CallEventSafely(PublicClass.Event.EEventHandle{PublicClass.Collections.Pool.MapPoolEventArg},System.Object,PublicClass.Collections.Pool.MapPoolEventArg)">
            <summary>
            EventHandle的安全调用方法
            </summary>
            <param name="handle"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PublicClass.Bean.Transaction.Command">
            <summary>
            主要用于处理事务步骤
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Command.#ctor(System.Object,System.String,System.Object[],PublicClass.Bean.Transaction.InvokeOrder,System.String)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="invokeParas"></param>
            <param name="order"></param>
            <param name="rollbackMethod"></param>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Command.#ctor(System.Object,System.String,System.Object[],PublicClass.Bean.Transaction.InvokeOrder)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="invokeParas"></param>
            <param name="order"></param>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Command.#ctor(System.Object,System.String,PublicClass.Bean.Transaction.InvokeOrder,System.String)">
            <summary>
            请注意如果需要前面执行的Command结果作为后面Command的参数，请加入invokeParas\rollbackParas中，不会二次调用，而且默认的Rollback方法第一个参数是method方法的结果
            </summary>
            <param name="o"></param>
            <param name="method"></param>
            <param name="order"></param>
            <param name="rollbackMethod"></param>
        </member>
        <member name="F:PublicClass.Bean.Transaction.Command.actioned">
            <summary>
            表示是否提交
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Command.Action">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Transaction.Command.RollBack">
            <summary>
            回滚
            </summary>
        </member>
        <member name="P:PublicClass.Bean.Transaction.Command.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:PublicClass.Bean.Transaction.Command.HasAction">
            <summary>
            是否已经成功提交
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.Middler">
            <summary>
            中介者，其类方法为默认调用Config
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.GetObjectByAppName(System.String,System.String)">
            <summary>
            根据应用域名与对象名获取对象实例
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.GetObjectByAppName``1(System.String,System.String)">
            <summary>
            根据应用域名与对象名获取对象实例
            </summary>
            <typeparam name="E"></typeparam>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.GetObjectsByAppName(System.String,System.String)">
            <summary>
            根据应用域名与对象组名获取对象实例组
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.GetObjectsByAppType(System.String,System.Type)">
            <summary>
            根据应用域名与父类类型获取对象实例组
            强烈不推荐使用此方法
            </summary>
            <param name="app"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.GetObjectsByAppType``1(System.String,System.Type)">
            <summary>
            根据应用域名与父类类型获取对象实例组
            强烈不推荐使用此方法
            </summary>
            <typeparam name="E"></typeparam>
            <param name="app"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middler.SetObjectByAppName(System.String,System.String,System.Object)">
            <summary>
            根据应用域名与对象名返回对象实例
            对于Instance方式和Pool方式的设置比较有效！
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Bean.Middler.Middlement">
            <summary>
            调用默认Config提供的Middler
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middlement.GetObjectByAppName(System.String,System.String)">
            <summary>
            根据应用域名与对象名获取对象实例
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middlement.GetObjectsByAppName(System.String,System.String)">
            <summary>
            根据应用域名与对象组名获取对象实例组
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middlement.GetObjectsByAppType(System.String,System.Type)">
            <summary>
            根据应用域名与父类类型获取对象实例组
            强烈不推荐使用此方法
            </summary>
            <param name="app"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middlement.SetObjectByAppName(System.String,System.String,System.Object)">
            <summary>
            根据应用域名与对象名返回对象实例
            对于Instance方式和Pool方式的设置比较有效！
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.Middlement.Dispose">
            <summary>
            删除对象
            </summary>
        </member>
        <member name="T:PublicClass.Threading.Process.ProcessState">
            <summary>
            声明进程状态
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.IDateTimePart">
            <summary>
            用于分别获取年/月/星期/日/时/分/秒实现
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.YearDateTimePart">
            <summary>
            年
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.WeekDateTimePart">
            <summary>
            星期
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.MonthDateTimePart">
            <summary>
            月
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.DayDateTimePart">
            <summary>
            日
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.HourDateTimePart">
            <summary>
            时
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.MinuteDateTimePart">
            <summary>
            分
            </summary>
        </member>
        <member name="T:PublicClass.Module.CronExpression.SecondDateTimePart">
            <summary>
            秒
            </summary>
        </member>
        <member name="T:PublicClass.IO.XmlValidate">
            <summary>
            本类用于检验Xml是否合理
            </summary>
        </member>
        <member name="M:PublicClass.IO.XmlValidate.#ctor(System.String,System.Xml.ValidationType)">
            <summary>
            构造函数 
            </summary>
            <param name="xml">配置Xml文件路径或者Xml文件</param>
            <param name="type">检验类型</param>
        </member>
        <member name="E:PublicClass.IO.XmlValidate.ValidationEvent">
            <summary>
            校验事件
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.ConfigManager">
             <summary>
            Config管理者负责实现对同一Config的递归调用的获取与设置。
            
            @author 白冰
            
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManager.GetParent">
             <summary>
            @return parent
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManager.GetResource">
             <summary>
            @return resource
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManager.GetConfig(System.String)">
             <summary>
            提供对应节点的代理实例
            
            @param key
            @return
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManager.GetConfigValue(System.String,System.Object)">
             <summary>
            提供对应节点 属性的递归调用式访问
            
            @param config
            @param key
            @return
             </summary>
        </member>
        <member name="M:PublicClass.IO.Config.ConfigManager.SetConfigValue(System.String,System.Object,System.Object)">
             <summary>
            提供对应节点 属性的递归调用式设置
            
            @param config
            @param key
            @param value
            @throws PublicClass.common.InvalidOperationException
             </summary>
        </member>
        <member name="E:PublicClass.IO.Config.ConfigManager.ConfigManagerFillEvent">
            <summary>
            用于说明ConfigManager自动更新
            </summary>
        </member>
        <member name="T:PublicClass.Db.Ni.NiPoolDataResource">
            <summary>
            池队列管理数据库连接，其对数据库开放连接进行自动管理，保证其不超过最大值，而且持续waittime时间的连接将自动关闭
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.String,System.Int32)">
            <summary>
            设定数据库池最大值，默认1分钟，空闲连接将被关闭！默认等待对象超时时间为30秒
            </summary>
            <param name="fac"></param>
            <param name="connstring"></param>
            <param name="size"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.String,System.Int32,System.Int32)">
            <summary>
            设定数据库池最大值，默认1分钟，空闲连接将被关闭！
            </summary>
            <param name="fac"></param>
            <param name="connstring"></param>
            <param name="size"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fac"></param>
            <param name="connstring"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <param name="waitTime"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.Collections.ArrayList,System.Int32)">
            <summary>
            设定数据库池最大值，默认1分钟，空闲连接将被关闭！默认等待对象超时时间为30秒
            </summary>
            <param name="fac"></param>
            <param name="connstrings"></param>
            <param name="size"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            设定数据库池最大值，默认1分钟，空闲连接将被关闭！
            </summary>
            <param name="fac"></param>
            <param name="connstrings"></param>
            <param name="size"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.#ctor(PublicClass.Db.Ni.IDataAbstractFactory,System.Collections.ArrayList,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fac"></param>
            <param name="connstrings"></param>
            <param name="size"></param>
            <param name="timeout"></param>
            <param name="waitTime"></param>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.GetConnection">
            <summary>
            获取数据库开放连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Db.Ni.NiPoolDataResource.SetConnection(System.Data.Common.DbConnection)">
            <summary>
            返回或者关闭数据库连接
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:PublicClass.Db.Ni.NiConfigConvert">
            <summary>
            泥框架配置文件解析器
            </summary>
        </member>
        <member name="M:PublicClass.Db.Ni.NiConfigConvert.CreateParameterEntity(System.Xml.XmlNode)">
            <summary>
            转换Xml节点成为ParameterEntity对象
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitList.GetThis">
            <summary>
            对实际使用的IList返回调用
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Bean.Transaction.InvokeOrder">
            <summary>
            声明Command在事务中执行的顺序
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.LogType">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.RELEASE">
             <summary>
             最终的需要显示的正确结果
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.ERROR">
             <summary>
             程序错误
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.WARN">
             <summary>
             可能引发错误的警告
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.INFO">
             <summary>
             程序日志信息（默认信息）
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.DEBUG">
             <summary>
             程序调试信息
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.TEST">
             <summary>
             测试信息说明
            </summary>
        </member>
        <member name="F:PublicClass.IO.Log.LogType.All">
            <summary>
            全部的，一般作为默认参数使用
            </summary>
        </member>
        <member name="T:PublicClass.IO.Config.ConfigAdapter">
             <summary>
            适配器管理从Manager到数据源和从数据源到Manager的具体转化。
            
            @author 白冰
            @version 2.0.81212.1
            
             </summary>
        </member>
        <member name="F:PublicClass.Event.EventLevel.Comment">
            <summary>
            注释级别 运行中产生的日志信息或调试信息级别 不会对程序运行产生方向性影响
            </summary>
        </member>
        <member name="F:PublicClass.Event.EventLevel.Importent">
            <summary>
            重要级别 事件对逻辑或者程序的运行有方向性影响
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.CreaterParameters">
            <summary>
            主要用于给生成者类提供各项参数
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.CreaterParameters.GetNames">
            <summary>
            获取参数的名字
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Bean.Middler.CreaterParameters.GetParameters">
            <summary>
            获取参数值
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Bean.Middler.ACreaterParameter">
            <summary>
            产生具体参数
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.EnumCreaterParameter">
            <summary>
            枚举类型对象 需要声明其全路径类型与值
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ConvertCreaterParameter">
            <summary>
            使用Convert将常用的进行系统类型转换 比如注意一定要填写类型的包装类比如int要写成Int32,long必须写成Int64，大小写可以忽略 比如byte与Byte认为是相同的，但是必须是包装类
            但是建议使用Convert方法中应有的类型
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ObjectCreaterParameter">
            <summary>
            记录ConfigKey,MiddlerParameter以产生对应的对象
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ConfigCreaterParameter">
            <summary>
            Config文件返回其他类型的值
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.MSConfigCreaterParameter">
            <summary>
            微软默认App.config文件返回其他类型的值
            暂时只能实现AppSettings和ConnectionStrings
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.NullCreaterParameter">
            <summary>
            处理空对象参数
            <null name="" />
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ParamsCreaterParameter">
            <summary>
            管理多参数设置比如SetP(a,b)
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ArrayCreaterParameter">
            <summary>
            处理数组参数
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.ConstructorCreater">
            <summary>
            构造函数方式生成对象
            </summary>
        </member>
        <member name="T:PublicClass.IO.Log.LogTypeTrigger">
            <summary>
            日志级别触发器
            根据最低、最高日志级别判断此次日志是否应该记录
            请注意这里是&gt;=与&lt;=的关系。
            </summary>
        </member>
        <member name="M:PublicClass.IO.Log.LogTypeTrigger.#ctor(PublicClass.IO.Log.LogType,PublicClass.IO.Log.LogType)">
            <summary>
            日志级别触发器
            根据最低、最高日志级别判断此次日志是否应该记录
            </summary>
            <param name="logType">&gt;=最低日志级别</param>
            <param name="maxLogType">&lt;=最高日志级别</param>
        </member>
        <member name="M:PublicClass.IO.Log.LogTypeTrigger.#ctor(PublicClass.IO.Log.LogType)">
            <summary>
            日志级别触发器
            根据最低、最高日志级别判断此次日志是否应该记录
            </summary>
            <param name="logType">&gt;=最低日志级别</param>
        </member>
        <member name="T:PublicClass.Event.EventHandle">
            <summary>
            与System.EventHandle同名实现的方法也一样，不过第二个参数类型变成了EventArg对象
            注意在winForm中订阅外部类的事件时 其处理事件函数一定要用 
            this.invoke(delegete 事件的委托类 方法接口类  ,new object[]{} 事件参数按顺序排列)
            调用真正的事件处理方法 防止出现交叉线程引用 因为方法接口在运行时相当于子线程的一个方法 所以不能直接调用外部线程的资源
            Java中还没有出现这个错误 可能因为使用事件较少 或者 其方法都是通过接口调用的没有指针 所以不会发生以上的错误
            </summary>
            <param name="sender">发送者</param>
            <param name="e">参数值</param>
        </member>
        <member name="T:PublicClass.Event.CommonEventHandle">
            <summary>
            说明发生了一个事件但是不允许对发生者作操作
            </summary>
            <param name="e">参数值</param>
        </member>
        <member name="T:PublicClass.Event.CommandEventHandle">
            <summary>
            纯命令参数只为说明一个命令发生了 不传递任何参数 也就不允许程序采取方法任何操作
            </summary>
        </member>
        <member name="T:PublicClass.Event.KeyValueFunction`1">
            <summary>
            用于获取一个简单KeyValue方法提供给自定义类属性使用
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:PublicClass.Event.KeyValueClass`1">
            <summary>
            用于获取一个简单KeyValue方法提供给自定义类属性使用
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:PublicClass.Collections.Pool.LRUPoolRefreshStaregy">
            
             @author baibing
             
            
        </member>
        <member name="T:PublicClass.Collections.LimitStack">
            <summary>
            限制类，用于处理有容量限制的Stack类 并且使用notifyAll与wait机制完成进队出队
            </summary>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.IsFull">
            <summary>
            是否已经到顶部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.IsEmpty">
            <summary>
            是否为0
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.IsButtom">
            <summary>
            是否已近到底部
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            建立一个真正的限制ICollection
            </summary>
            <param name="coll">被限制的Collection</param>
            <param name="size">容量</param>
            <exception >初始化错误</exception>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.GetMax">
            <summary>
            
            </summary>
            <returns>容量最大值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.GetMin">
            <summary>
            
            </summary>
            <returns>容量最小值</returns>
        </member>
        <member name="M:PublicClass.Collections.LimitStack.GetNow">
            <summary>
            
            </summary>
            <returns>现在的值应该与Count相同意义</returns>
        </member>
        <member name="T:PublicClass.Bean.Middler.ObjectStaticFactory">
            <summary>
            此类不对外公开，纯属内部类优化
            </summary>
        </member>
        <member name="T:PublicClass.Bean.Middler.DefaultValues">
            <summary>
            用于记录默认值
            </summary>
        </member>
        <member name="M:PublicClass.Bean.Middler.ConstructorBeanCreater.#ctor(System.String,System.String,System.Int32,PublicClass.Bean.Middler.CreaterParameters)">
            <summary>
            初始化参数
            </summary>
            <param name="dll"></param>
            <param name="type"></param>
            <param name="constructorParaLength">构造函数参数长度</param>
            <param name="paras"></param>
        </member>
    </members>
</doc>
